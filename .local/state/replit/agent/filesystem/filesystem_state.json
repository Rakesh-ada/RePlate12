{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"readme.md":{"content":"# Overview\n\nRePlate Campus is a comprehensive web application designed to reduce food waste on university campuses by connecting students with discounted surplus food items from campus canteens. The platform features a dual-user system where staff can list available food items with discounted pricing and students can browse, claim, and pick up meals using claim codes for verification.\n\nThe application implements a modern full-stack architecture with real-time food listings, secure authentication, a comprehensive claim code system, and a food donation management system for NGO partnerships that ensures expired food items are redirected to help those in need.\n\n## Recent Changes\n\n**August 19, 2025 - Food Donation System Implementation:**\n- Added complete donation management system for expired food items\n- Created food donations database schema with NGO tracking\n- Implemented staff dashboard donation tab with transfer and management capabilities\n- Added backend APIs for donation operations (transfer, reserve, collect)\n- Integrated automated expired food item transfer to donation pool\n- Built NGO reservation system with contact information management\n- Updated currency display to Indian Rupees (â‚¹) throughout application\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\nThe client-side application is built using React 18 with TypeScript and follows modern React patterns:\n\n- **Component Architecture**: Utilizes shadcn/ui components built on Radix UI primitives for consistent, accessible UI elements\n- **Styling System**: Implements Tailwind CSS with CSS variables for theming and responsive design\n- **State Management**: Uses React Query (@tanstack/react-query) for server state management and React hooks for local state\n- **Routing**: Implements wouter for lightweight client-side routing with role-based access control\n- **Form Handling**: Integrates react-hook-form with Zod validation for type-safe form management\n\n## Backend Architecture\n\nThe server follows an Express.js-based REST API pattern with TypeScript:\n\n- **API Layer**: RESTful endpoints organized in routes with middleware for authentication and error handling\n- **Database Layer**: Uses Drizzle ORM with PostgreSQL for type-safe database operations and schema management\n- **Storage Pattern**: Implements a storage interface pattern for data access, providing abstraction over database operations\n- **Authentication System**: Integrates Replit's OpenID Connect authentication with session management\n\n## Data Storage Solutions\n\n- **Primary Database**: PostgreSQL with Neon serverless hosting for scalable data storage\n- **ORM**: Drizzle ORM providing type-safe database queries and automatic TypeScript inference\n- **Session Storage**: PostgreSQL-backed session storage using connect-pg-simple for persistent user sessions\n- **Schema Management**: Centralized schema definitions in TypeScript with automatic validation using drizzle-zod\n\n## Authentication and Authorization\n\n- **Authentication Provider**: Replit Auth using OpenID Connect for secure user authentication\n- **Session Management**: Server-side sessions stored in PostgreSQL with configurable TTL\n- **Role-Based Access**: Dual user roles (student/staff) with different dashboard access and permissions\n- **Middleware Protection**: Route-level authentication middleware protecting API endpoints\n\n## Claim Code System\n\n- **Generation**: Custom claim code generation for meal claims with unique identifiers\n- **Verification**: Server-side claim code validation for meal pickup confirmation\n- **Status Tracking**: Comprehensive claim status management (reserved, claimed, expired, cancelled)\n\n## Key Data Models\n\n- **Users**: Profile management with role differentiation and contact information\n- **Food Items**: Complete meal metadata including pricing, availability, and canteen details\n- **Food Claims**: Relationship tracking between users and claimed meals with claim codes\n- **Sessions**: Secure session storage for authentication persistence\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle Kit**: Database migration and schema management toolkit\n\n## Authentication Services\n- **Replit Auth**: OpenID Connect authentication provider\n- **Passport.js**: Authentication middleware with OpenID Connect strategy\n\n## Frontend Libraries\n- **Radix UI**: Headless component primitives for accessibility\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **React Query**: Server state management and caching\n- **React Hook Form**: Form state management with validation\n\n## Development Tools\n- **Vite**: Frontend build tool with development server\n- **TypeScript**: Type safety across the entire application stack\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n## Utility Libraries\n- **Zod**: Runtime type validation and schema definition\n- **Date-fns**: Date manipulation and formatting utilities\n- **Nanoid**: Unique identifier generation for various entities","size_bytes":5110},"replit.md":{"content":"# Overview\n\nRePlate Campus is a comprehensive web application designed to reduce food waste on university campuses by connecting students with discounted surplus food items from campus canteens. The platform features a dual-user system with separate portals for students to browse and claim meals, and staff to list surplus food items. The application implements real-time food listings, secure authentication, a comprehensive claim code system for meal pickup verification, and a food donation management system for NGO partners to handle expired food items.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n\nThe client-side application is built using React 18 with TypeScript and follows modern React patterns:\n\n- **Component Architecture**: Utilizes shadcn/ui components built on Radix UI primitives for consistent, accessible UI elements with comprehensive component library including forms, dialogs, tables, and navigation\n- **Styling System**: Implements Tailwind CSS with CSS variables for theming, custom animations, and responsive design with dark/light theme support\n- **State Management**: Uses React Query (@tanstack/react-query) for server state management with caching and React hooks for local state management\n- **Routing**: Implements wouter for lightweight client-side routing with role-based access control separating student and staff dashboards\n- **Form Handling**: Integrates react-hook-form with Zod validation for type-safe form management and schema validation\n\n## Backend Architecture\n\nThe server follows an Express.js-based REST API pattern with TypeScript:\n\n- **API Layer**: RESTful endpoints organized with middleware for authentication, error handling, and request validation\n- **Database Layer**: Uses Drizzle ORM with PostgreSQL for type-safe database operations, schema management, and automatic TypeScript inference\n- **Storage Pattern**: Implements a storage interface pattern for data access, providing abstraction over database operations with comprehensive CRUD operations\n- **Authentication System**: Custom session-based authentication with demo login capabilities and role-based access control\n- **Session Management**: In-memory session store with cookie-based session handling for development\n\n## Data Storage Solutions\n\n- **Primary Database**: PostgreSQL with Neon serverless hosting configured through Drizzle kit for scalable data storage\n- **ORM**: Drizzle ORM providing type-safe database queries, migrations, and automatic TypeScript schema inference\n- **Schema Design**: Comprehensive schema including users, food items, food claims, food donations with proper relationships and constraints\n- **Migration System**: Automated database migrations with Drizzle kit for schema changes and version control\n\n## Authentication and Authorization\n\n- **Session-Based Auth**: Custom session middleware with cookie management for persistent user sessions\n- **Role-Based Access**: Differentiated access control for student and staff roles with separate dashboard interfaces\n- **Demo Authentication**: Development-friendly demo login system for testing different user roles\n- **Security**: Secure session handling with proper cookie configuration and session expiration\n\n# External Dependencies\n\n## Core Technologies\n- **Database**: Neon PostgreSQL serverless database with connection pooling\n- **ORM**: Drizzle ORM for type-safe database operations and schema management\n- **UI Components**: Radix UI primitives for accessible component foundations\n- **Styling**: Tailwind CSS for utility-first styling with PostCSS processing\n- **Build Tools**: Vite for fast development and build processes with TypeScript support\n\n## Key Libraries\n- **Frontend**: React 18, React Query for state management, React Hook Form for form handling\n- **Backend**: Express.js, WebSocket support for real-time features\n- **Validation**: Zod for runtime type checking and schema validation\n- **Development**: ESBuild for production builds, TSX for development server\n- **Date Handling**: date-fns for date manipulation and formatting\n\n## Development Tools\n- **Replit Integration**: Replit-specific plugins for development environment integration\n- **Error Handling**: Runtime error overlay for development debugging\n- **Code Analysis**: Cartographer plugin for code visualization and analysis","size_bytes":4384},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Custom theme colors\n        forest: {\n          DEFAULT: \"var(--forest)\",\n          light: \"var(--forest-light)\",\n          dark: \"var(--forest-dark)\",\n        },\n        surface: \"var(--surface)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: [\"Inter\", \"system-ui\", \"sans-serif\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3028},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import 'dotenv/config';\nimport express, { type Request, Response, NextFunction, RequestHandler } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport session, { Session, SessionData } from 'express-session';\n\ndeclare module 'express-session' {\n  interface SessionData {\n    user?: {\n      claims: { sub: string };\n      access_token: string;\n      expires_at: number;\n    };\n  }\n}\n\n// Extend Express Request type to include session\ndeclare global {\n  namespace Express {\n    interface Request {\n      session: Session & Partial<SessionData>;\n    }\n  }\n}\n\n// Simple in-memory session store\nconst sessions: Record<string, any> = {};\nconst app = express();\n\n// Custom session middleware\nconst sessionMiddleware: RequestHandler = (req, res, next) => {\n  // Get session ID from cookie or generate a new one\n  let sessionId = req.headers.cookie?.split('; ')\n    .find((row: string) => row.startsWith('connect.sid='))\n    ?.split('=')[1];\n\n  if (!sessionId) {\n    sessionId = Math.random().toString(36).substring(2, 15);\n    res.cookie('connect.sid', sessionId, { \n      httpOnly: true, \n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    });\n  }\n\n  // Initialize session if it doesn't exist\n  if (!sessions[sessionId]) {\n    sessions[sessionId] = {};\n  }\n\n  // Add session to request\n  req.session = sessions[sessionId];\n  \n  // Clean up old sessions (optional)\n  const oneDay = 24 * 60 * 60 * 1000;\n  Object.keys(sessions).forEach(id => {\n    if (Date.now() - parseInt(id, 36) > oneDay) {\n      delete sessions[id];\n    }\n  });\n\n  next();\n};\n\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(sessionMiddleware);\n\napp.use((req: Request, res: Response, next: NextFunction) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json.bind(res);\n  res.json = function (bodyJson: any) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson(bodyJson);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n const port = 5000;\n  server.listen(port, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":3431},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nimport { insertFoodItemSchema, insertFoodClaimSchema, insertEventSchema } from \"@shared/schema\";\nimport { generateClaimCode } from \"@shared/qr-utils\";\nimport { z } from \"zod\";\nimport 'express-session';\n\n// Extend session interface for demo auth\ndeclare module 'express-session' {\n  interface SessionData {\n    user?: {\n      claims: { sub: string };\n      access_token: string;\n      expires_at: number;\n    };\n  }\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  \n\n  // Development authentication bypass for demo purposes\n  app.get('/api/demo-login/:role', async (req, res) => {\n    try {\n      const { role } = req.params;\n      \n      if (role !== 'student' && role !== 'admin') {\n        return res.status(400).json({ message: \"Invalid role. Use 'student' or 'admin'\" });\n      }\n\n      // Create or get existing demo user\n      const demoUser = await storage.upsertUser({\n        id: `demo-${role}-main`,\n        email: `${role}-main@demo.edu`,\n        firstName: role === 'admin' ? 'Demo' : 'Student',\n        lastName: role === 'admin' ? 'Admin' : 'Demo',\n        role: role,\n        studentId: role === 'student' ? 'STU123456' : undefined,\n        phoneNumber: '+1234567890',\n      });\n\n      // Create demo session\n      req.session.user = {\n        claims: { sub: demoUser.id },\n        access_token: 'demo-token',\n        expires_at: Math.floor(Date.now() / 1000) + 3600, // 1 hour\n      };\n\n      res.json({ success: true, user: demoUser });\n    } catch (error) {\n      console.error(\"Error creating demo user:\", error);\n      res.status(500).json({ message: \"Failed to create demo user\" });\n    }\n  });\n\n  // Demo data seeding\n  app.post('/api/seed-demo-data', async (req, res) => {\n    try {\n      // Use the main demo admin user (same as login)\n      const adminUser = await storage.upsertUser({\n        id: 'demo-admin-main',\n        email: `admin-main@demo.edu`,\n        firstName: 'Demo',\n        lastName: 'Admin',\n        role: 'admin',\n        phoneNumber: '+1234567890',\n      });\n\n      // Check if demo data already exists for this user\n      const existingItems = await storage.getFoodItemsByCreator(adminUser.id);\n      if (existingItems.length > 0) {\n        return res.json({ success: true, message: 'Demo data already exists' });\n      }\n\n      // Create some demo food items\n      const now = new Date();\n      const availableUntil = new Date();\n      availableUntil.setHours(availableUntil.getHours() + 6); // Available for 6 hours\n\n      const demoFoodItems = [\n        {\n          name: 'Margherita Pizza',\n          description: 'Fresh mozzarella, basil, and tomato sauce on a crispy crust',\n          canteenName: 'Main Campus Cafeteria',\n          canteenLocation: 'Building A, Ground Floor',\n          quantityAvailable: 3,\n          imageUrl: null,\n          availableUntil: availableUntil.toISOString(),\n          isActive: true,\n          createdBy: adminUser.id,\n        },\n        {\n          name: 'Chicken Caesar Salad',\n          description: 'Grilled chicken breast with romaine lettuce, parmesan, and caesar dressing',\n          canteenName: 'Student Union Food Court',\n          canteenLocation: 'Building B, 2nd Floor',\n          quantityAvailable: 5,\n          imageUrl: null,\n          availableUntil: availableUntil.toISOString(),\n          isActive: true,\n          createdBy: adminUser.id,\n        },\n        {\n          name: 'Vegetarian Wrap',\n          description: 'Mixed vegetables, hummus, and fresh herbs in a whole wheat wrap',\n          canteenName: 'Green Campus Cafe',\n          canteenLocation: 'Library Building, 1st Floor',\n          quantityAvailable: 4,\n          imageUrl: null,\n          availableUntil: availableUntil.toISOString(),\n          isActive: true,\n          createdBy: adminUser.id,\n        }\n      ];\n\n      for (const item of demoFoodItems) {\n        await storage.createFoodItem(item);\n      }\n\n      res.json({ success: true, message: 'Demo data seeded successfully' });\n    } catch (error) {\n      console.error(\"Error seeding demo data:\", error);\n      res.status(500).json({ message: \"Failed to seed demo data\" });\n    }\n  });\n\n  // Auth routes\n  app.get('/api/auth/user', async (req: any, res) => {\n    try {\n      let user = null;\n      \n      // Check for demo session first\n      if (req.session.user) {\n        const userId = req.session.user.claims.sub;\n        user = await storage.getUser(userId);\n      }\n      \n      if (!user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      return res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      return res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Logout route\n  app.post('/api/auth/logout', (req: any, res) => {\n    // Destroy the session\n    req.session.destroy((err: any) => {\n      if (err) {\n        console.error(\"Error destroying session:\", err);\n        return res.status(500).json({ message: \"Error logging out\" });\n      }\n      // Clear the session cookie\n      res.clearCookie('connect.sid', { path: '/' });\n      return res.json({ success: true });\n    });\n  });\n\n  // Food items routes\n  app.get('/api/food-items', async (req, res) => {\n    try {\n      const items = await storage.getAllActiveFoodItems();\n      res.json(items);\n    } catch (error) {\n      console.error(\"Error fetching food items:\", error);\n      res.status(500).json({ message: \"Failed to fetch food items\" });\n    }\n  });\n\n  app.get('/api/food-items/my', async (req: any, res) => {\n    try {\n      let userId = null;\n      \n      // Check demo session first\n      if (req.session.user) {\n        userId = req.session.user.claims.sub;\n      }\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const items = await storage.getFoodItemsByCreator(userId);\n      res.json(items);\n    } catch (error) {\n      console.error(\"Error fetching user's food items:\", error);\n      res.status(500).json({ message: \"Failed to fetch food items\" });\n    }\n  });\n\n  app.post('/api/food-items', async (req: any, res) => {\n    try {\n      let userId = null;\n      \n      // Check demo session first\n      if (req.session.user) {\n        userId = req.session.user.claims.sub;\n      }\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admin can create food items\" });\n      }\n\n      const validatedData = insertFoodItemSchema.parse({\n        ...req.body,\n        createdBy: userId,\n      });\n      const item = await storage.createFoodItem(validatedData);\n      res.status(201).json(item);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error creating food item:\", error);\n      res.status(500).json({ message: \"Failed to create food item\" });\n    }\n  });\n\n  app.put('/api/food-items/:id', async (req: any, res) => {\n    try {\n      let userId = null;\n      \n      // Check demo session first\n      if (req.session.user) {\n        userId = req.session.user.claims.sub;\n      }\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const user = await storage.getUser(userId);\n      \n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admin can update food items\" });\n      }\n\n      const { id } = req.params;\n      const existingItem = await storage.getFoodItemById(id);\n      \n      if (!existingItem || existingItem.createdBy !== userId) {\n        return res.status(404).json({ message: \"Food item not found or unauthorized\" });\n      }\n\n      const validatedData = insertFoodItemSchema.partial().parse(req.body);\n      const updatedItem = await storage.updateFoodItem(id, validatedData);\n      res.json(updatedItem);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid data\", errors: error.errors });\n      }\n      console.error(\"Error updating food item:\", error);\n      res.status(500).json({ message: \"Failed to update food item\" });\n    }\n  });\n\n  app.delete('/api/food-items/:id', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const existingItem = await storage.getFoodItemById(id);\n      \n      if (!existingItem) {\n        return res.status(404).json({ message: \"Food item not found\" });\n      }\n\n      await storage.deleteFoodItem(id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting food item:\", error);\n      res.status(500).json({ message: \"Failed to delete food item\" });\n    }\n  });\n\n  // Food claims routes\n  app.post('/api/food-claims', async (req: any, res) => {\n    try {\n      let userId = null;\n      \n      // Check demo session first\n      if (req.session.user) {\n        userId = req.session.user.claims.sub;\n      }\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const { foodItemId, quantityClaimed = 1 } = req.body;\n\n      // Validate food item exists and has availability\n      const foodItem = await storage.getFoodItemById(foodItemId);\n      if (!foodItem || !foodItem.isActive) {\n        return res.status(404).json({ message: \"Food item not found or inactive\" });\n      }\n\n      if (foodItem.quantityAvailable < quantityClaimed) {\n        return res.status(400).json({ message: \"Insufficient quantity available\" });\n      }\n\n      if (new Date() >= new Date(foodItem.availableUntil)) {\n        return res.status(400).json({ message: \"Food item is no longer available\" });\n      }\n\n      // Check if user has already claimed this food item\n      const hasAlreadyClaimed = await storage.hasUserClaimedFoodItem(userId, foodItemId);\n      if (hasAlreadyClaimed) {\n        return res.status(400).json({ message: \"You have already claimed this food item\" });\n      }\n\n      // Generate claim code\n      const claimCode = generateClaimCode();\n      \n      // Set expiration (20 minutes from now)\n      const expiresAt = new Date();\n      expiresAt.setMinutes(expiresAt.getMinutes() + 20);\n\n      const claimData = {\n        userId,\n        foodItemId,\n        quantityClaimed,\n        claimCode,\n        status: \"reserved\" as const,\n        expiresAt,\n      };\n\n      const claim = await storage.createFoodClaim(claimData);\n      res.status(201).json(claim);\n    } catch (error) {\n      console.error(\"Error creating food claim:\", error);\n      res.status(500).json({ message: \"Failed to claim food item\" });\n    }\n  });\n\n  app.get('/api/food-claims/my', async (req: any, res) => {\n    try {\n      let userId = null;\n      \n      // Check demo session first\n      if (req.session.user) {\n        userId = req.session.user.claims.sub;\n      }\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      const claims = await storage.getFoodClaimsByUser(userId);\n      res.json(claims);\n    } catch (error) {\n      console.error(\"Error fetching user's claims:\", error);\n      res.status(500).json({ message: \"Failed to fetch claims\" });\n    }\n  });\n\n  app.get('/api/food-claims/code/:claimCode', async (req, res) => {\n    try {\n      const { claimCode } = req.params;\n      const claim = await storage.getFoodClaimByClaimCode(claimCode);\n      \n      if (!claim) {\n        return res.status(404).json({ message: \"Claim not found\" });\n      }\n\n      // Check if claim is expired\n      if (new Date() > new Date(claim.expiresAt)) {\n        await storage.updateFoodClaimStatus(claim.id, \"expired\");\n        return res.status(400).json({ message: \"Claim has expired\" });\n      }\n\n      res.json(claim);\n    } catch (error) {\n      console.error(\"Error fetching claim by code:\", error);\n      res.status(500).json({ message: \"Failed to fetch claim\" });\n    }\n  });\n\n  app.put('/api/food-claims/:id/claim', async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const claim = await storage.getFoodClaimByClaimCode(id); // id is actually claimCode here\n      \n      if (!claim) {\n        return res.status(404).json({ message: \"Claim not found\" });\n      }\n\n      if (claim.status !== \"reserved\") {\n        return res.status(400).json({ message: \"Claim is not in reserved status\" });\n      }\n\n      if (new Date() > new Date(claim.expiresAt)) {\n        await storage.updateFoodClaimStatus(claim.id, \"expired\");\n        return res.status(400).json({ message: \"Claim has expired\" });\n      }\n\n      const updatedClaim = await storage.updateFoodClaimStatus(claim.id, \"claimed\", new Date());\n      res.json(updatedClaim);\n    } catch (error) {\n      console.error(\"Error claiming food:\", error);\n      res.status(500).json({ message: \"Failed to claim food\" });\n    }\n  });\n\n  // Stats routes\n  app.get('/api/stats', async (req, res) => {\n    try {\n      const stats = await storage.getCampusStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  // Claim verification endpoints\n  app.post(\"/api/food-claims/verify\", async (req: any, res) => {\n    try {\n      const { claimCode } = req.body;\n      if (!claimCode) {\n        return res.status(400).json({ success: false, message: \"Claim code is required\" });\n      }\n\n      const claim = await storage.getClaimByCode(claimCode);\n      if (!claim) {\n        return res.json({ success: false, message: \"Invalid claim code\" });\n      }\n\n      if (claim.status !== \"reserved\") {\n        return res.json({ success: false, message: `Claim is ${claim.status}` });\n      }\n\n      if (new Date() > new Date(claim.expiresAt)) {\n        return res.json({ success: false, message: \"Claim has expired\" });\n      }\n\n      res.json({ success: true, claim });\n    } catch (error) {\n      console.error(\"Error verifying claim:\", error);\n      res.status(500).json({ success: false, message: \"Failed to verify claim\" });\n    }\n  });\n\n  app.post(\"/api/food-claims/:id/complete\", async (req: any, res) => {\n    try {\n      const claimId = req.params.id;\n      const updatedClaim = await storage.completeClaim(claimId);\n      \n      // Remove the food item from the table after successful claim completion\n      if (updatedClaim.foodItem) {\n        await storage.deleteFoodItem(updatedClaim.foodItem.id);\n      }\n      \n      res.json(updatedClaim);\n    } catch (error) {\n      console.error(\"Error completing claim:\", error);\n      res.status(500).json({ message: \"Failed to complete claim\" });\n    }\n  });\n\n  // Food donation routes\n  app.get('/api/donations', async (req: any, res) => {\n    try {\n      let userId = null;\n      \n      // Check demo session first\n      if (req.session.user) {\n        userId = req.session.user.claims.sub;\n      }\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admin can view donations\" });\n      }\n\n      const donations = await storage.getDonationsByCreator(userId);\n      res.json(donations);\n    } catch (error) {\n      console.error(\"Error fetching donations:\", error);\n      res.status(500).json({ message: \"Failed to fetch donations\" });\n    }\n  });\n\n  app.post('/api/donations/transfer-expired', async (req: any, res) => {\n    try {\n      let userId = null;\n      \n      // Check demo session first\n      if (req.session.user) {\n        userId = req.session.user.claims.sub;\n      }\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admin can transfer expired items\" });\n      }\n\n      const transferredCount = await storage.transferExpiredItemsToDonations();\n      res.json({ success: true, transferredCount });\n    } catch (error) {\n      console.error(\"Error transferring expired items:\", error);\n      res.status(500).json({ message: \"Failed to transfer expired items\" });\n    }\n  });\n\n  app.put('/api/donations/:id/reserve', async (req: any, res) => {\n    try {\n      let userId = null;\n      \n      // Check demo session first\n      if (req.session.user) {\n        userId = req.session.user.claims.sub;\n      }\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admin can manage donations\" });\n      }\n\n      const { id } = req.params;\n      const { ngoName, ngoContactPerson, ngoPhoneNumber } = req.body;\n\n      if (!ngoName || !ngoContactPerson || !ngoPhoneNumber) {\n        return res.status(400).json({ message: \"NGO information is required\" });\n      }\n\n      const updatedDonation = await storage.updateDonationStatus(id, \"reserved_for_ngo\", {\n        ngoName,\n        ngoContactPerson,\n        ngoPhoneNumber,\n      });\n\n      res.json(updatedDonation);\n    } catch (error) {\n      console.error(\"Error reserving donation:\", error);\n      res.status(500).json({ message: \"Failed to reserve donation\" });\n    }\n  });\n\n  app.put('/api/donations/:id/collect', async (req: any, res) => {\n    try {\n      let userId = null;\n      \n      // Check demo session first\n      if (req.session.user) {\n        userId = req.session.user.claims.sub;\n      }\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admin can manage donations\" });\n      }\n\n      const { id } = req.params;\n      const updatedDonation = await storage.updateDonationStatus(id, \"collected\");\n      res.json(updatedDonation);\n    } catch (error) {\n      console.error(\"Error marking donation as collected:\", error);\n      res.status(500).json({ message: \"Failed to mark donation as collected\" });\n    }\n  });\n\n  // Events routes\n  app.get('/api/events', async (req: any, res) => {\n    try {\n      const events = await storage.getAllEvents();\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n      res.status(500).json({ message: \"Failed to fetch events\" });\n    }\n  });\n\n  app.get('/api/events/my', async (req: any, res) => {\n    try {\n      let userId = null;\n      \n      if (req.session.user) {\n        userId = req.session.user.claims.sub;\n      }\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admin can view their events\" });\n      }\n\n      const events = await storage.getEventsByCreator(userId);\n      res.json(events);\n    } catch (error) {\n      console.error(\"Error fetching user events:\", error);\n      res.status(500).json({ message: \"Failed to fetch events\" });\n    }\n  });\n\n  app.post('/api/events', async (req: any, res) => {\n    try {\n      let userId = null;\n      \n      if (req.session.user) {\n        userId = req.session.user.claims.sub;\n      }\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admin can create events\" });\n      }\n\n      const validatedData = insertEventSchema.parse({\n        ...req.body,\n        createdBy: userId,\n      });\n\n      const event = await storage.createEvent(validatedData);\n      res.status(201).json(event);\n    } catch (error) {\n      console.error(\"Error creating event:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid event data\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to create event\" });\n    }\n  });\n\n  app.put('/api/events/:id', async (req: any, res) => {\n    try {\n      let userId = null;\n      \n      if (req.session.user) {\n        userId = req.session.user.claims.sub;\n      }\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admin can update events\" });\n      }\n\n      const { id } = req.params;\n      const existingEvent = await storage.getEventById(id);\n      \n      if (!existingEvent) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n\n      if (existingEvent.createdBy !== userId) {\n        return res.status(403).json({ message: \"You can only update your own events\" });\n      }\n\n      const validatedData = insertEventSchema.partial().parse(req.body);\n      const updatedEvent = await storage.updateEvent(id, validatedData);\n      res.json(updatedEvent);\n    } catch (error) {\n      console.error(\"Error updating event:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ \n          message: \"Invalid event data\", \n          errors: error.errors \n        });\n      }\n      res.status(500).json({ message: \"Failed to update event\" });\n    }\n  });\n\n  app.delete('/api/events/:id', async (req: any, res) => {\n    try {\n      let userId = null;\n      \n      if (req.session.user) {\n        userId = req.session.user.claims.sub;\n      }\n      \n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user || user.role !== 'admin') {\n        return res.status(403).json({ message: \"Only admin can delete events\" });\n      }\n\n      const { id } = req.params;\n      const existingEvent = await storage.getEventById(id);\n      \n      if (!existingEvent) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n\n      if (existingEvent.createdBy !== userId) {\n        return res.status(403).json({ message: \"You can only delete your own events\" });\n      }\n\n      await storage.deleteEvent(id);\n      res.json({ message: \"Event deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting event:\", error);\n      res.status(500).json({ message: \"Failed to delete event\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}","size_bytes":23067},"server/storage.ts":{"content":"import {\n  users,\n  foodItems,\n  foodClaims,\n  foodDonations,\n  events,\n  type User,\n  type UpsertUser,\n  type FoodItem,\n  type InsertFoodItem,\n  type FoodClaim,\n  type InsertFoodClaim,\n  type FoodDonation,\n  type InsertFoodDonation,\n  type Event,\n  type InsertEvent,\n  type FoodItemWithCreator,\n  type FoodClaimWithDetails,\n  type FoodDonationWithDetails,\n  type EventWithCreator,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, gte, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (required for Replit Auth)\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Food item operations\n  getAllActiveFoodItems(): Promise<FoodItemWithCreator[]>;\n  getFoodItemById(id: string): Promise<FoodItem | undefined>;\n  createFoodItem(foodItem: InsertFoodItem): Promise<FoodItem>;\n  updateFoodItem(\n    id: string,\n    updates: Partial<InsertFoodItem>,\n  ): Promise<FoodItem>;\n  deleteFoodItem(id: string): Promise<void>;\n  getFoodItemsByCreator(creatorId: string): Promise<FoodItem[]>;\n\n  // Food claim operations\n  createFoodClaim(\n    claim: InsertFoodClaim & { claimCode: string },\n  ): Promise<FoodClaim>;\n  getFoodClaimsByUser(userId: string): Promise<FoodClaimWithDetails[]>;\n  getFoodClaimByClaimCode(\n    claimCode: string,\n  ): Promise<FoodClaimWithDetails | undefined>;\n  updateFoodClaimStatus(\n    id: string,\n    status: string,\n    claimedAt?: Date,\n  ): Promise<FoodClaim>;\n  getActiveFoodClaims(): Promise<FoodClaimWithDetails[]>;\n\n  // Get claim with full details for verification\n  getClaimByCode(claimCode: string): Promise<FoodClaimWithDetails | undefined>;\n\n  // Complete a claim (mark as collected)\n  completeClaim(claimId: string): Promise<FoodClaimWithDetails>;\n\n  // Check if user has already claimed a specific food item\n  hasUserClaimedFoodItem(userId: string, foodItemId: string): Promise<boolean>;\n\n  // Food donation operations\n  getExpiredFoodItems(): Promise<FoodItem[]>;\n  createFoodDonation(donation: InsertFoodDonation): Promise<FoodDonation>;\n  getAllDonations(): Promise<FoodDonationWithDetails[]>;\n  getDonationsByCreator(creatorId: string): Promise<FoodDonationWithDetails[]>;\n  updateDonationStatus(\n    id: string,\n    status: string,\n    ngoInfo?: {\n      ngoName: string;\n      ngoContactPerson: string;\n      ngoPhoneNumber: string;\n    },\n  ): Promise<FoodDonation>;\n  transferExpiredItemsToDonations(): Promise<number>;\n\n  // Status management\n  updateExpiredItemsStatus(): Promise<number>;\n\n  // Event operations\n  createEvent(event: InsertEvent): Promise<Event>;\n  getAllEvents(): Promise<EventWithCreator[]>;\n  getEventsByCreator(creatorId: string): Promise<Event[]>;\n  getEventById(id: string): Promise<Event | undefined>;\n  updateEvent(id: string, updates: Partial<InsertEvent>): Promise<Event>;\n  deleteEvent(id: string): Promise<void>;\n\n  // Stats operations\n  getCampusStats(): Promise<{\n    totalMealsSaved: number;\n    activeStudents: number;\n    partnerCanteens: number;\n    totalSavings: number;\n    foodProvided: number;\n    wastedFood: number;\n    claimedFood: number;\n    carbonFootprintSaved: number;\n    waterFootprintSaved: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // Food item operations\n  async getAllActiveFoodItems(): Promise<FoodItemWithCreator[]> {\n    const now = new Date().toISOString();\n\n    // First, automatically deactivate expired items\n    await this.updateExpiredItemsStatus();\n\n    const items = await db\n      .select({\n        id: foodItems.id,\n        name: foodItems.name,\n        description: foodItems.description,\n        canteenName: foodItems.canteenName,\n        canteenLocation: foodItems.canteenLocation,\n        quantityAvailable: foodItems.quantityAvailable,\n        imageUrl: foodItems.imageUrl,\n        availableUntil: foodItems.availableUntil,\n        isActive: foodItems.isActive,\n        createdBy: foodItems.createdBy,\n        createdAt: foodItems.createdAt,\n        updatedAt: foodItems.updatedAt,\n        createdByUser: users,\n        claimCount: sql<number>`(SELECT COUNT(*) FROM ${foodClaims} WHERE ${foodClaims.foodItemId} = ${foodItems.id} AND ${foodClaims.status} IN ('reserved', 'claimed'))`,\n      })\n      .from(foodItems)\n      .leftJoin(users, eq(foodItems.createdBy, users.id))\n      .where(\n        and(\n          eq(foodItems.isActive, true),\n          gte(foodItems.availableUntil, now),\n          gte(foodItems.quantityAvailable, 1),\n        ),\n      )\n      .orderBy(desc(foodItems.createdAt));\n\n    return items.map(item => ({\n      id: item.id,\n      name: item.name,\n      description: item.description,\n      canteenName: item.canteenName,\n      canteenLocation: item.canteenLocation,\n      quantityAvailable: item.quantityAvailable,\n      imageUrl: item.imageUrl,\n      availableUntil: item.availableUntil,\n      isActive: item.isActive,\n      createdBy: item.createdByUser || { id: '', email: '', firstName: '', lastName: '', profileImageUrl: '', role: 'admin', studentId: '', phoneNumber: '', createdAt: null, updatedAt: null },\n      createdAt: item.createdAt,\n      updatedAt: item.updatedAt,\n      claimCount: Number(item.claimCount),\n    })) as FoodItemWithCreator[];\n  }\n\n  async getFoodItemById(id: string): Promise<FoodItem | undefined> {\n    const [item] = await db\n      .select()\n      .from(foodItems)\n      .where(eq(foodItems.id, id));\n    return item;\n  }\n\n  async createFoodItem(foodItem: InsertFoodItem): Promise<FoodItem> {\n    const [item] = await db.insert(foodItems).values(foodItem).returning();\n    return item;\n  }\n\n  async updateFoodItem(\n    id: string,\n    updates: Partial<InsertFoodItem>,\n  ): Promise<FoodItem> {\n    const [item] = await db\n      .update(foodItems)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(foodItems.id, id))\n      .returning();\n    return item;\n  }\n\n  async deleteFoodItem(id: string): Promise<void> {\n    // Delete associated food donations first (if any)\n    await db.delete(foodDonations).where(eq(foodDonations.foodItemId, id));\n\n    // Delete associated food claims\n    await db.delete(foodClaims).where(eq(foodClaims.foodItemId, id));\n\n    // Finally delete the food item\n    await db.delete(foodItems).where(eq(foodItems.id, id));\n  }\n\n  async getFoodItemsByCreator(creatorId: string): Promise<FoodItem[]> {\n    // Update expired items status before fetching\n    await this.updateExpiredItemsStatus();\n\n    return await db\n      .select()\n      .from(foodItems)\n      .where(eq(foodItems.createdBy, creatorId))\n      .orderBy(desc(foodItems.createdAt));\n  }\n\n  // Food claim operations\n  async createFoodClaim(\n    claim: InsertFoodClaim & { claimCode: string },\n  ): Promise<FoodClaim> {\n    const [newClaim] = await db.insert(foodClaims).values(claim).returning();\n\n    // Update food item quantity\n    await db\n      .update(foodItems)\n      .set({\n        quantityAvailable: sql`quantity_available - ${claim.quantityClaimed}`,\n        updatedAt: new Date(),\n      })\n      .where(eq(foodItems.id, claim.foodItemId));\n\n    return newClaim;\n  }\n\n  async getFoodClaimsByUser(userId: string): Promise<FoodClaimWithDetails[]> {\n    return (await db\n      .select({\n        id: foodClaims.id,\n        userId: foodClaims.userId,\n        foodItemId: foodClaims.foodItemId,\n        quantityClaimed: foodClaims.quantityClaimed,\n        claimCode: foodClaims.claimCode,\n        status: foodClaims.status,\n        expiresAt: foodClaims.expiresAt,\n        claimedAt: foodClaims.claimedAt,\n        createdAt: foodClaims.createdAt,\n        user: users,\n        foodItem: foodItems,\n      })\n      .from(foodClaims)\n      .leftJoin(users, eq(foodClaims.userId, users.id))\n      .leftJoin(foodItems, eq(foodClaims.foodItemId, foodItems.id))\n      .where(eq(foodClaims.userId, userId))\n      .orderBy(desc(foodClaims.createdAt))) as any;\n  }\n\n  async getFoodClaimByClaimCode(\n    claimCode: string,\n  ): Promise<FoodClaimWithDetails | undefined> {\n    const [claim] = (await db\n      .select({\n        id: foodClaims.id,\n        userId: foodClaims.userId,\n        foodItemId: foodClaims.foodItemId,\n        quantityClaimed: foodClaims.quantityClaimed,\n        claimCode: foodClaims.claimCode,\n        status: foodClaims.status,\n        expiresAt: foodClaims.expiresAt,\n        claimedAt: foodClaims.claimedAt,\n        createdAt: foodClaims.createdAt,\n        user: users,\n        foodItem: foodItems,\n      })\n      .from(foodClaims)\n      .leftJoin(users, eq(foodClaims.userId, users.id))\n      .leftJoin(foodItems, eq(foodClaims.foodItemId, foodItems.id))\n      .where(eq(foodClaims.claimCode, claimCode))) as any;\n\n    return claim;\n  }\n\n  async updateFoodClaimStatus(\n    id: string,\n    status: string,\n    claimedAt?: Date,\n  ): Promise<FoodClaim> {\n    const [claim] = await db\n      .update(foodClaims)\n      .set({ status, claimedAt })\n      .where(eq(foodClaims.id, id))\n      .returning();\n    return claim;\n  }\n\n  async getActiveFoodClaims(): Promise<FoodClaimWithDetails[]> {\n    const now = new Date();\n    return (await db\n      .select({\n        id: foodClaims.id,\n        userId: foodClaims.userId,\n        foodItemId: foodClaims.foodItemId,\n        quantityClaimed: foodClaims.quantityClaimed,\n        claimCode: foodClaims.claimCode,\n        status: foodClaims.status,\n        expiresAt: foodClaims.expiresAt,\n        claimedAt: foodClaims.claimedAt,\n        createdAt: foodClaims.createdAt,\n        user: users,\n        foodItem: foodItems,\n      })\n      .from(foodClaims)\n      .leftJoin(users, eq(foodClaims.userId, users.id))\n      .leftJoin(foodItems, eq(foodClaims.foodItemId, foodItems.id))\n      .where(\n        and(eq(foodClaims.status, \"reserved\"), gte(foodClaims.expiresAt, now)),\n      )\n      .orderBy(desc(foodClaims.createdAt))) as any;\n  }\n\n  async getCampusStats(): Promise<{\n    totalMealsSaved: number;\n    activeStudents: number;\n    partnerCanteens: number;\n    totalSavings: number;\n    foodProvided: number;\n    wastedFood: number;\n    claimedFood: number;\n    carbonFootprintSaved: number;\n    waterFootprintSaved: number;\n  }> {\n    // Get total meals claimed\n    const [mealsSaved] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(foodClaims)\n      .where(eq(foodClaims.status, \"claimed\"));\n\n    // Get active students (users with claims in last 30 days)\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    const [activeStudents] = await db\n      .select({ count: sql<number>`count(distinct user_id)` })\n      .from(foodClaims)\n      .where(gte(foodClaims.createdAt, thirtyDaysAgo));\n\n    // Get unique canteens count\n    const [partnerCanteens] = await db\n      .select({ count: sql<number>`count(distinct canteen_name)` })\n      .from(foodItems)\n      .where(eq(foodItems.isActive, true));\n\n    // Get total food provided (sum of all food items ever created)\n    const [foodProvided] = await db\n      .select({ totalQuantity: sql<number>`sum(quantity_available)` })\n      .from(foodItems);\n\n    // Get wasted food (expired or expired claims)\n    const now = new Date();\n    const [expiredClaims] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(foodClaims)\n      .where(sql`status = 'expired' OR (status = 'reserved' AND expires_at < ${now.toISOString()})`);\n\n    const [expiredItems] = await db\n      .select({ totalQuantity: sql<number>`sum(quantity_available)` })\n      .from(foodItems)\n      .where(sql`available_until < ${now.toISOString()} AND is_active = false`);\n\n    // Get claimed food (successfully claimed meals)\n    const [claimedFood] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(foodClaims)\n      .where(eq(foodClaims.status, \"claimed\"));\n\n    // Calculate environmental impact\n    // Average meal: 1.5 kg CO2, 500 liters water\n    const totalMeals = mealsSaved?.count || 0;\n    const carbonFootprintSaved = totalMeals * 1.5; // kg CO2 saved\n    const waterFootprintSaved = totalMeals * 500; // liters saved\n\n    return {\n      totalMealsSaved: totalMeals,\n      activeStudents: activeStudents?.count || 0,\n      partnerCanteens: partnerCanteens?.count || 0,\n      totalSavings: 0,\n      foodProvided: foodProvided?.totalQuantity || 0,\n      wastedFood: (expiredClaims?.count || 0) + (expiredItems?.totalQuantity || 0),\n      claimedFood: claimedFood?.count || 0,\n      carbonFootprintSaved,\n      waterFootprintSaved,\n    };\n  }\n\n  // Get claim with full details for verification (alias for getFoodClaimByClaimCode)\n  async getClaimByCode(\n    claimCode: string,\n  ): Promise<FoodClaimWithDetails | undefined> {\n    return this.getFoodClaimByClaimCode(claimCode);\n  }\n\n  // Complete a claim (mark as collected)\n  async completeClaim(claimId: string): Promise<FoodClaimWithDetails> {\n    // Update the claim status to 'claimed'\n    await this.updateFoodClaimStatus(claimId, \"claimed\", new Date());\n\n    // Return the updated claim with full details\n    const claim = await db\n      .select({\n        id: foodClaims.id,\n        userId: foodClaims.userId,\n        foodItemId: foodClaims.foodItemId,\n        quantityClaimed: foodClaims.quantityClaimed,\n        claimCode: foodClaims.claimCode,\n        status: foodClaims.status,\n        expiresAt: foodClaims.expiresAt,\n        claimedAt: foodClaims.claimedAt,\n        createdAt: foodClaims.createdAt,\n        user: {\n          id: users.id,\n          email: users.email,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          profileImageUrl: users.profileImageUrl,\n          role: users.role,\n          studentId: users.studentId,\n          phoneNumber: users.phoneNumber,\n          createdAt: users.createdAt,\n          updatedAt: users.updatedAt,\n        },\n        foodItem: {\n          id: foodItems.id,\n          name: foodItems.name,\n          description: foodItems.description,\n          canteenName: foodItems.canteenName,\n          canteenLocation: foodItems.canteenLocation,\n          quantityAvailable: foodItems.quantityAvailable,\n          imageUrl: foodItems.imageUrl,\n          availableUntil: foodItems.availableUntil,\n          isActive: foodItems.isActive,\n          createdBy: foodItems.createdBy,\n          createdAt: foodItems.createdAt,\n          updatedAt: foodItems.updatedAt,\n        },\n      })\n      .from(foodClaims)\n      .leftJoin(users, eq(foodClaims.userId, users.id))\n      .leftJoin(foodItems, eq(foodClaims.foodItemId, foodItems.id))\n      .where(eq(foodClaims.id, claimId))\n      .limit(1);\n\n    if (!claim[0]) {\n      throw new Error(\"Claim not found after completion\");\n    }\n\n    return claim[0] as FoodClaimWithDetails;\n  }\n\n  // Check if user has already claimed a specific food item\n  async hasUserClaimedFoodItem(userId: string, foodItemId: string): Promise<boolean> {\n    const existingClaim = await db\n      .select({ id: foodClaims.id })\n      .from(foodClaims)\n      .where(\n        and(\n          eq(foodClaims.userId, userId),\n          eq(foodClaims.foodItemId, foodItemId),\n          sql`${foodClaims.status} IN ('reserved', 'claimed')`\n        )\n      )\n      .limit(1);\n    \n    return existingClaim.length > 0;\n  }\n\n  // Food donation operations\n  async getExpiredFoodItems(): Promise<FoodItem[]> {\n    const now = new Date().toISOString();\n    return await db\n      .select()\n      .from(foodItems)\n      .where(\n        and(\n          eq(foodItems.isActive, false), // Now get inactive items (which are expired)\n          sql`${foodItems.availableUntil} < ${now}`,\n        ),\n      )\n      .orderBy(desc(foodItems.createdAt));\n  }\n\n  // New method to automatically update expired items to inactive\n  async updateExpiredItemsStatus(): Promise<number> {\n    const now = new Date().toISOString();\n\n    // Set expired items to inactive\n    const expiredResult = await db\n      .update(foodItems)\n      .set({\n        isActive: false,\n        updatedAt: new Date(),\n      })\n      .where(\n        and(\n          eq(foodItems.isActive, true),\n          sql`${foodItems.availableUntil} < ${now}`,\n        ),\n      )\n      .returning({ id: foodItems.id });\n\n    // Reactivate items that are not expired anymore (in case time was extended)\n    const reactivatedResult = await db\n      .update(foodItems)\n      .set({\n        isActive: true,\n        updatedAt: new Date(),\n      })\n      .where(\n        and(\n          eq(foodItems.isActive, false),\n          gte(foodItems.availableUntil, now),\n          gte(foodItems.quantityAvailable, 1),\n        ),\n      )\n      .returning({ id: foodItems.id });\n\n    return expiredResult.length;\n  }\n\n  async createFoodDonation(\n    donation: InsertFoodDonation,\n  ): Promise<FoodDonation> {\n    const [newDonation] = await db\n      .insert(foodDonations)\n      .values(donation)\n      .returning();\n    return newDonation;\n  }\n\n  async getAllDonations(): Promise<FoodDonationWithDetails[]> {\n    return (await db\n      .select({\n        id: foodDonations.id,\n        foodItemId: foodDonations.foodItemId,\n        ngoName: foodDonations.ngoName,\n        ngoContactPerson: foodDonations.ngoContactPerson,\n        ngoPhoneNumber: foodDonations.ngoPhoneNumber,\n        quantityDonated: foodDonations.quantityDonated,\n        status: foodDonations.status,\n        donatedAt: foodDonations.donatedAt,\n        reservedAt: foodDonations.reservedAt,\n        collectedAt: foodDonations.collectedAt,\n        notes: foodDonations.notes,\n        createdAt: foodDonations.createdAt,\n        foodItem: foodItems,\n      })\n      .from(foodDonations)\n      .leftJoin(foodItems, eq(foodDonations.foodItemId, foodItems.id))\n      .orderBy(desc(foodDonations.createdAt))) as any;\n  }\n\n  async getDonationsByCreator(\n    creatorId: string,\n  ): Promise<FoodDonationWithDetails[]> {\n    return (await db\n      .select({\n        id: foodDonations.id,\n        foodItemId: foodDonations.foodItemId,\n        ngoName: foodDonations.ngoName,\n        ngoContactPerson: foodDonations.ngoContactPerson,\n        ngoPhoneNumber: foodDonations.ngoPhoneNumber,\n        quantityDonated: foodDonations.quantityDonated,\n        status: foodDonations.status,\n        donatedAt: foodDonations.donatedAt,\n        reservedAt: foodDonations.reservedAt,\n        collectedAt: foodDonations.collectedAt,\n        notes: foodDonations.notes,\n        createdAt: foodDonations.createdAt,\n        foodItem: foodItems,\n      })\n      .from(foodDonations)\n      .leftJoin(foodItems, eq(foodDonations.foodItemId, foodItems.id))\n      .where(eq(foodItems.createdBy, creatorId))\n      .orderBy(desc(foodDonations.createdAt))) as any;\n  }\n\n  async updateDonationStatus(\n    id: string,\n    status: string,\n    ngoInfo?: {\n      ngoName: string;\n      ngoContactPerson: string;\n      ngoPhoneNumber: string;\n    },\n  ): Promise<FoodDonation> {\n    const updateData: any = { status };\n\n    if (status === \"reserved_for_ngo\" && ngoInfo) {\n      updateData.ngoName = ngoInfo.ngoName;\n      updateData.ngoContactPerson = ngoInfo.ngoContactPerson;\n      updateData.ngoPhoneNumber = ngoInfo.ngoPhoneNumber;\n      updateData.reservedAt = new Date();\n    } else if (status === \"collected\") {\n      updateData.collectedAt = new Date();\n    }\n\n    const [donation] = await db\n      .update(foodDonations)\n      .set(updateData)\n      .where(eq(foodDonations.id, id))\n      .returning();\n    return donation;\n  }\n\n  async transferExpiredItemsToDonations(): Promise<number> {\n    // First update expired items status\n    await this.updateExpiredItemsStatus();\n\n    const expiredItems = await this.getExpiredFoodItems();\n    let transferredCount = 0;\n\n    for (const item of expiredItems) {\n      if (item.quantityAvailable > 0) {\n        // Check if donation already exists for this item\n        const existingDonation = await db\n          .select()\n          .from(foodDonations)\n          .where(eq(foodDonations.foodItemId, item.id))\n          .limit(1);\n\n        if (existingDonation.length === 0) {\n          // Create donation entry only if it doesn't exist\n          await this.createFoodDonation({\n            foodItemId: item.id,\n            quantityDonated: item.quantityAvailable,\n            status: \"available\",\n            notes: `Auto-transferred from expired food item: ${item.name}`,\n          });\n          transferredCount++;\n        }\n      }\n    }\n\n    return transferredCount;\n  }\n\n  // Event operations\n  async createEvent(event: InsertEvent): Promise<Event> {\n    const [newEvent] = await db.insert(events).values(event).returning();\n    return newEvent;\n  }\n\n  async getAllEvents(): Promise<EventWithCreator[]> {\n    return (await db\n      .select({\n        id: events.id,\n        title: events.title,\n        description: events.description,\n        startTime: events.startTime,\n        endTime: events.endTime,\n        location: events.location,\n        phoneNumber: events.phoneNumber,\n        createdBy: events.createdBy,\n        createdAt: events.createdAt,\n        updatedAt: events.updatedAt,\n        createdByUser: users,\n      })\n      .from(events)\n      .leftJoin(users, eq(events.createdBy, users.id))\n      .orderBy(desc(events.startTime))) as any;\n  }\n\n  async getEventsByCreator(creatorId: string): Promise<Event[]> {\n    return await db\n      .select()\n      .from(events)\n      .where(eq(events.createdBy, creatorId))\n      .orderBy(desc(events.startTime));\n  }\n\n  async getEventById(id: string): Promise<Event | undefined> {\n    const [event] = await db\n      .select()\n      .from(events)\n      .where(eq(events.id, id));\n    return event;\n  }\n\n  async updateEvent(id: string, updates: Partial<InsertEvent>): Promise<Event> {\n    const [event] = await db\n      .update(events)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(events.id, id))\n      .returning();\n    return event;\n  }\n\n  async deleteEvent(id: string): Promise<void> {\n    await db.delete(events).where(eq(events.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":22384},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"..\", \"dist\", \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2277},"shared/qr-utils.ts":{"content":"export function generateClaimCode(): string {\n  // Generate a unique claim code for canteen staff verification\n  const random1 = Math.random().toString(36).substring(2, 5).toUpperCase();\n  const random2 = Math.random().toString(36).substring(2, 5).toUpperCase();\n  return `${random1}-${random2}`;\n}","size_bytes":298},"shared/schema.ts":{"content":"import { sql, relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n  uuid,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (required for Replit Auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").notNull().default(\"student\"), // student or admin\n  studentId: varchar(\"student_id\"),\n  phoneNumber: varchar(\"phone_number\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Food items table\nexport const foodItems = pgTable(\"food_items\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  canteenName: varchar(\"canteen_name\", { length: 255 }).notNull(),\n  canteenLocation: varchar(\"canteen_location\", { length: 255 }),\n  quantityAvailable: integer(\"quantity_available\").notNull().default(0),\n  imageUrl: text(\"image_url\"),\n  availableUntil: timestamp(\"available_until\", { mode: 'string' }).notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Food claims table\nexport const foodClaims = pgTable(\"food_claims\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  foodItemId: uuid(\"food_item_id\").notNull().references(() => foodItems.id),\n  quantityClaimed: integer(\"quantity_claimed\").notNull().default(1),\n  claimCode: varchar(\"claim_code\", { length: 20 }).unique().notNull(),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"reserved\"), // reserved, claimed, expired, cancelled\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  claimedAt: timestamp(\"claimed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Food donations table\nexport const foodDonations = pgTable(\"food_donations\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  foodItemId: uuid(\"food_item_id\").notNull().references(() => foodItems.id),\n  ngoName: varchar(\"ngo_name\", { length: 255 }),\n  ngoContactPerson: varchar(\"ngo_contact_person\", { length: 255 }),\n  ngoPhoneNumber: varchar(\"ngo_phone_number\", { length: 20 }),\n  quantityDonated: integer(\"quantity_donated\").notNull(),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"available\"), // available, reserved_for_ngo, collected\n  donatedAt: timestamp(\"donated_at\").defaultNow(),\n  reservedAt: timestamp(\"reserved_at\"),\n  collectedAt: timestamp(\"collected_at\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Events table\nexport const events = pgTable(\"events\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  startTime: timestamp(\"start_time\", { mode: 'string' }).notNull(),\n  endTime: timestamp(\"end_time\", { mode: 'string' }).notNull(),\n  location: varchar(\"location\", { length: 255 }).notNull(),\n  phoneNumber: varchar(\"phone_number\", { length: 20 }),\n  createdBy: varchar(\"created_by\").notNull().references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  foodItems: many(foodItems),\n  foodClaims: many(foodClaims),\n  events: many(events),\n}));\n\nexport const foodItemsRelations = relations(foodItems, ({ one, many }) => ({\n  createdBy: one(users, {\n    fields: [foodItems.createdBy],\n    references: [users.id],\n  }),\n  claims: many(foodClaims),\n  donations: many(foodDonations),\n}));\n\nexport const foodClaimsRelations = relations(foodClaims, ({ one }) => ({\n  user: one(users, {\n    fields: [foodClaims.userId],\n    references: [users.id],\n  }),\n  foodItem: one(foodItems, {\n    fields: [foodClaims.foodItemId],\n    references: [foodItems.id],\n  }),\n}));\n\nexport const foodDonationsRelations = relations(foodDonations, ({ one }) => ({\n  foodItem: one(foodItems, {\n    fields: [foodDonations.foodItemId],\n    references: [foodItems.id],\n  }),\n}));\n\nexport const eventsRelations = relations(events, ({ one }) => ({\n  createdBy: one(users, {\n    fields: [events.createdBy],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n  role: true,\n  studentId: true,\n  phoneNumber: true,\n});\n\nexport const insertFoodItemSchema = createInsertSchema(foodItems).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFoodClaimSchema = createInsertSchema(foodClaims).omit({\n  id: true,\n  claimCode: true,\n  createdAt: true,\n});\n\nexport const insertFoodDonationSchema = createInsertSchema(foodDonations).omit({\n  id: true,\n  donatedAt: true,\n  createdAt: true,\n});\n\nexport const insertEventSchema = createInsertSchema(events).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertFoodItem = z.infer<typeof insertFoodItemSchema>;\nexport type FoodItem = typeof foodItems.$inferSelect;\nexport type InsertFoodClaim = z.infer<typeof insertFoodClaimSchema>;\nexport type FoodClaim = typeof foodClaims.$inferSelect;\nexport type InsertFoodDonation = z.infer<typeof insertFoodDonationSchema>;\nexport type FoodDonation = typeof foodDonations.$inferSelect;\nexport type InsertEvent = z.infer<typeof insertEventSchema>;\nexport type Event = typeof events.$inferSelect;\n\n// Extended types with relations\nexport type FoodItemWithCreator = FoodItem & {\n  createdBy: User;\n  claimCount?: number;\n};\n\nexport type FoodClaimWithDetails = FoodClaim & {\n  user: User;\n  foodItem: FoodItem;\n};\n\nexport type FoodDonationWithDetails = FoodDonation & {\n  foodItem: FoodItem;\n};\n\nexport type EventWithCreator = Event & {\n  createdBy: User;\n};\n","size_bytes":6726},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport StudentDashboard from \"@/pages/student-dashboard\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/student\" component={StudentDashboard} />\n          <Route path=\"/admin\" component={AdminDashboard} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1322},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* Custom animations */\n@keyframes fade-in {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n@keyframes fade-in-up {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.animate-fade-in {\n  animation: fade-in 1s ease-out forwards;\n  opacity: 0;\n}\n\n.animate-fade-in-up {\n  animation: fade-in-up 1s ease-out forwards;\n  opacity: 0;\n}\n\n:root {\n  --background: hsl(250, 20%, 99%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 25%, 7.8431%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  \n  /* Custom theme colors matching design */\n  --forest: hsl(140, 24%, 44%);\n  --forest-light: hsl(140, 24%, 54%);\n  --forest-dark: hsl(140, 30%, 35%);\n  --surface: hsl(0, 0%, 98%);\n  \n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(222, 84%, 4.9%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 4.9%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 4.9%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(210, 40%, 98%);\n  --primary-foreground: hsl(222, 47%, 11%);\n  --secondary: hsl(217, 32%, 17%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(217, 32%, 17%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(212, 72%, 59%);\n  --chart-1: hsl(220, 70%, 50%);\n  --chart-2: hsl(160, 60%, 45%);\n  --chart-3: hsl(30, 80%, 55%);\n  --chart-4: hsl(280, 65%, 60%);\n  --chart-5: hsl(340, 75%, 55%);\n  \n  /* Dark theme custom colors */\n  --forest: hsl(140, 24%, 54%);\n  --forest-light: hsl(140, 24%, 64%);\n  --forest-dark: hsl(140, 30%, 44%);\n  --surface: hsl(222, 84%, 6%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-feature-settings: \"rlig\" 1, \"calt\" 1;\n  }\n  \n  h1, h2, h3, h4, h5, h6 {\n    @apply font-semibold tracking-tight;\n  }\n}\n\n@layer utilities {\n  .text-forest {\n    color: var(--forest);\n  }\n  \n  .text-forest-light {\n    color: var(--forest-light);\n  }\n  \n  .text-forest-dark {\n    color: var(--forest-dark);\n  }\n  \n  .bg-forest {\n    background-color: var(--forest);\n  }\n  \n  .bg-forest-light {\n    background-color: var(--forest-light);\n  }\n  \n  .bg-forest-dark {\n    background-color: var(--forest-dark);\n  }\n  \n  .bg-surface {\n    background-color: var(--surface);\n  }\n  \n  .hover\\:bg-forest-dark:hover {\n    background-color: var(--forest-dark);\n  }\n  \n  .hover\\:bg-forest:hover {\n    background-color: var(--forest);\n  }\n  \n  .border-forest {\n    border-color: var(--forest);\n  }\n  \n  .hover\\:border-forest:hover {\n    border-color: var(--forest);\n  }\n  \n  .hover\\:text-forest:hover {\n    color: var(--forest);\n  }\n  \n  .line-clamp-1 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 1;\n  }\n  \n  .line-clamp-2 {\n    overflow: hidden;\n    display: -webkit-box;\n    -webkit-box-orient: vertical;\n    -webkit-line-clamp: 2;\n  }\n}\n","size_bytes":4654},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/claim-code-modal.tsx":{"content":"import {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, Share2, Copy } from \"lucide-react\";\nimport { formatTimeRemaining } from \"@/lib/qr-utils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { FoodClaim, FoodItem } from \"@shared/schema\";\n\ninterface ClaimCodeModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  claim: (FoodClaim & { foodItem: FoodItem }) | null;\n}\n\nexport function ClaimCodeModal({ isOpen, onClose, claim }: ClaimCodeModalProps) {\n  const { toast } = useToast();\n\n  const handleCopyCode = () => {\n    if (!claim?.claimCode) return;\n\n    navigator.clipboard.writeText(claim.claimCode);\n    toast({\n      title: \"Claim Code Copied\",\n      description: \"Your claim code has been copied to clipboard.\",\n    });\n  };\n\n  const handleShare = async () => {\n    if (!claim) return;\n\n    const shareData = {\n      title: \"RePlate Campus - Meal Claim\",\n      text: `I've claimed a meal: ${claim.foodItem.name}. Claim code: ${claim.claimCode}`,\n    };\n\n    if (navigator.share) {\n      try {\n        await navigator.share(shareData);\n        toast({\n          title: \"Shared Successfully\",\n          description: \"Your meal claim has been shared.\",\n        });\n      } catch (error) {\n        // User cancelled sharing\n      }\n    } else {\n      // Fallback to copy text\n      navigator.clipboard.writeText(shareData.text);\n      toast({\n        title: \"Text Copied\",\n        description: \"Claim details have been copied to clipboard.\",\n      });\n    }\n  };\n\n  if (!claim) return null;\n\n  const timeRemaining = formatTimeRemaining(claim.expiresAt.toString());\n  const isExpired = timeRemaining === \"Expired\";\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"text-center\">\n            <div className=\"flex flex-col items-center\">\n              <div className=\"w-16 h-16 bg-green-100 dark:bg-green-900 rounded-full flex items-center justify-center mb-4\">\n                <CheckCircle className=\"text-green-600 dark:text-green-400 w-8 h-8\" />\n              </div>\n              <h3 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">\n                Meal Claimed Successfully!\n              </h3>\n              <p className=\"text-gray-600 dark:text-gray-400 text-sm font-normal\">\n                Show this claim code to canteen staff to collect your meal\n              </p>\n            </div>\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Claim Code Display */}\n          <div className=\"flex justify-center\">\n            <div className=\"bg-white dark:bg-gray-800 p-8 rounded-lg border-2 border-gray-200 dark:border-gray-600 text-center\">\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-2\">Your Claim Code</p>\n              <div className=\"text-3xl font-mono font-bold text-forest dark:text-forest-light tracking-widest\">\n                {claim.claimCode}\n              </div>\n              <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\n                Give this code to canteen staff\n              </p>\n            </div>\n          </div>\n\n          {/* Claim Details */}\n          <div className=\"bg-forest/10 dark:bg-forest/20 rounded-lg p-4 space-y-2\">\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-gray-600 dark:text-gray-400\">Expires in:</span>\n              <Badge variant={isExpired ? \"destructive\" : \"secondary\"}>\n                {timeRemaining}\n              </Badge>\n            </div>\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-gray-600 dark:text-gray-400\">Claim ID:</span>\n              <span className=\"font-mono text-gray-900 dark:text-white\">\n                #{claim.id.slice(-8).toUpperCase()}\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-gray-600 dark:text-gray-400\">Meal:</span>\n              <span className=\"font-medium text-gray-900 dark:text-white\">\n                {claim.foodItem.name}\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-gray-600 dark:text-gray-400\">Canteen:</span>\n              <span className=\"text-gray-900 dark:text-white\">\n                {claim.foodItem.canteenName}\n              </span>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"grid grid-cols-2 gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleShare}\n              className=\"flex items-center\"\n            >\n              <Share2 className=\"w-4 h-4 mr-1\" />\n              Share\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={handleCopyCode}\n              className=\"flex items-center\"\n            >\n              <Copy className=\"w-4 h-4 mr-1\" />\n              Copy Code\n            </Button>\n          </div>\n\n          <div className=\"text-center\">\n            <Button onClick={onClose} className=\"w-full\">\n              Done\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5550},"client/src/components/meal-card.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MapPin, Clock, Utensils } from \"lucide-react\";\nimport type { FoodItemWithCreator } from \"@shared/schema\";\nimport { formatTimeRemaining } from \"@/lib/qr-utils\";\n\ninterface MealCardProps {\n  meal: FoodItemWithCreator;\n  onClaim: (mealId: string) => void;\n  isLoading?: boolean;\n  userClaims?: Array<{ foodItemId: string; status: string }>;\n}\n\nexport function MealCard({ meal, onClaim, isLoading = false, userClaims = [] }: MealCardProps) {\n  const timeRemaining = formatTimeRemaining(meal.availableUntil.toString());\n  const isExpired = timeRemaining === \"Expired\";\n  const isLowQuantity = meal.quantityAvailable <= 2;\n  const hasAlreadyClaimed = userClaims.some(claim => \n    claim.foodItemId === meal.id && ['reserved', 'claimed'].includes(claim.status)\n  );\n\n  return (\n    <Card className=\"bg-white dark:bg-gray-900 shadow-sm border border-gray-200 dark:border-gray-800 overflow-hidden hover:shadow-md transition-shadow\">\n      {/* Meal Image */}\n      <div className=\"w-full h-48 bg-gray-100 dark:bg-gray-800 flex items-center justify-center\">\n        {meal.imageUrl ? (\n          <img\n            src={meal.imageUrl}\n            alt={meal.name}\n            className=\"w-full h-full object-cover\"\n          />\n        ) : (\n          <div className=\"text-gray-400 dark:text-gray-600\">\n            <Utensils className=\"w-12 h-12\" />\n          </div>\n        )}\n      </div>\n\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start justify-between mb-2\">\n          <h3 className=\"font-semibold text-gray-900 dark:text-white line-clamp-1\">\n            {meal.name}\n          </h3>\n          <Badge \n            variant={isLowQuantity ? \"destructive\" : \"secondary\"}\n            className=\"ml-2 shrink-0\"\n          >\n            {meal.quantityAvailable} left\n          </Badge>\n        </div>\n\n        <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-3 line-clamp-2\">\n          {meal.description}\n        </p>\n\n        <div className=\"flex items-center text-sm text-gray-500 dark:text-gray-400 mb-3\">\n          <MapPin className=\"w-4 h-4 mr-1\" />\n          <span>{meal.canteenName}</span>\n        </div>\n\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <span className=\"text-lg font-bold text-green-600 dark:text-green-400\">\n              FREE\n            </span>\n            <Badge variant=\"outline\" className=\"text-blue-600 border-blue-600\">\n              {meal.claimCount || 0} claimed\n            </Badge>\n          </div>\n          <div className=\"flex items-center text-sm\">\n            <Clock className=\"w-4 h-4 mr-1\" />\n            <span className={`font-medium ${\n              isExpired \n                ? \"text-red-600\" \n                : timeRemaining.includes(\"m left\") && !timeRemaining.includes(\"h\")\n                  ? \"text-orange-600\"\n                  : \"text-green-600\"\n            }`}>\n              {timeRemaining}\n            </span>\n          </div>\n        </div>\n\n        <Button\n          onClick={() => onClaim(meal.id)}\n          disabled={isLoading || isExpired || meal.quantityAvailable === 0 || hasAlreadyClaimed}\n          className=\"w-full bg-forest hover:bg-forest-dark text-white disabled:opacity-50\"\n          data-testid=\"button-claim-meal\"\n        >\n          {isLoading ? \"Claiming...\" : \n           hasAlreadyClaimed ? \"Already Claimed\" :\n           isExpired ? \"Expired\" : \n           \"Claim Meal\"}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3674},"client/src/components/stats-section.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Utensils, Users, Store, DollarSign } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface CampusStats {\n  totalMealsSaved: number;\n  activeStudents: number;\n  partnerCanteens: number;\n  totalSavings: number;\n  foodProvided: number;\n  wastedFood: number;\n  claimedFood: number;\n  carbonFootprintSaved: number;\n  waterFootprintSaved: number;\n}\n\nexport function StatsSection() {\n  const { data: stats, isLoading } = useQuery<CampusStats>({\n    queryKey: [\"/api/stats\"],\n  });\n\n  if (isLoading) {\n    return (\n      <section className=\"bg-surface dark:bg-gray-800 py-16\">\n        <div className=\"max-w-6xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-4\">\n              Campus Meal Stats\n            </h2>\n            <p className=\"text-gray-600 dark:text-gray-300\">\n              See how students are accessing campus meals through RePlate\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            {Array.from({ length: 4 }).map((_, i) => (\n              <Card key={i} className=\"bg-white dark:bg-gray-900\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <Skeleton className=\"w-12 h-12 rounded-lg\" />\n                    <Skeleton className=\"h-8 w-16\" />\n                  </div>\n                  <Skeleton className=\"h-5 w-24 mb-1\" />\n                  <Skeleton className=\"h-4 w-16\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  const statItems = [\n    {\n      icon: Utensils,\n      value: stats?.totalMealsSaved || 0,\n      label: \"Meals Saved\",\n      period: \"This month\",\n      bgColor: \"bg-forest/10\",\n      iconColor: \"text-forest\",\n    },\n    {\n      icon: Users,\n      value: stats?.activeStudents || 0,\n      label: \"Active Students\",\n      period: \"This week\",\n      bgColor: \"bg-forest/10\",\n      iconColor: \"text-forest\",\n    },\n    {\n      icon: Store,\n      value: stats?.partnerCanteens || 0,\n      label: \"Partner Canteens\",\n      period: \"Campus wide\",\n      bgColor: \"bg-forest/10\",\n      iconColor: \"text-forest\",\n    },\n    {\n      icon: DollarSign,\n      value: `${Math.round(stats?.totalSavings || 0).toLocaleString()}`,\n      label: \"Student Savings\",\n      period: \"Total saved\",\n      bgColor: \"bg-forest/10\",\n      iconColor: \"text-forest\",\n    },\n  ];\n\n  return (\n    <section className=\"relative bg-gradient-to-br from-forest/5 via-white to-forest/10 dark:from-gray-800 dark:via-gray-900 dark:to-gray-800 py-20 overflow-hidden\">\n      {/* Background decorative elements */}\n      <div className=\"absolute inset-0 opacity-30\">\n        <div className=\"absolute top-10 left-10 w-32 h-32 bg-forest/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute bottom-10 right-10 w-48 h-48 bg-forest/5 rounded-full blur-3xl\"></div>\n        <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-gradient-to-r from-forest/5 to-transparent rounded-full blur-3xl\"></div>\n      </div>\n\n      <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-16\">\n          <div className=\"inline-block\">\n            <span className=\"inline-block px-4 py-2 bg-forest/10 text-forest dark:bg-forest/20 dark:text-forest-light text-sm font-medium rounded-full mb-4\">\n              Live Impact Dashboard\n            </span>\n          </div>\n          <h2 className=\"text-4xl lg:text-5xl font-bold bg-gradient-to-r from-gray-900 via-forest to-gray-900 dark:from-white dark:via-forest-light dark:to-white bg-clip-text text-transparent mb-6\">\n            Campus Meal Stats\n          </h2>\n          <p className=\"text-lg text-gray-600 dark:text-gray-300 max-w-2xl mx-auto\">\n            Real-time insights into how students are reducing food waste and saving money through RePlate\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\">\n          {statItems.map((stat, index) => (\n            <Card key={index} className=\"group relative bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm shadow-xl border border-gray-100/50 dark:border-gray-600/30 hover:shadow-2xl transition-all duration-300 hover:-translate-y-2 overflow-hidden\">\n              {/* Animated gradient border */}\n              <div className=\"absolute inset-0 bg-gradient-to-r from-forest/30 via-forest/10 to-forest/30 dark:from-forest/40 dark:via-forest/20 dark:to-forest/40 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n              \n              <CardContent className=\"relative p-8\">\n                <div className=\"flex items-start justify-between mb-6\">\n                  <div className={`w-16 h-16 ${stat.bgColor} rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300`}>\n                    <stat.icon className={`${stat.iconColor} w-8 h-8`} />\n                  </div>\n                  <div className=\"text-right\">\n                    <span className=\"text-3xl lg:text-4xl font-bold bg-gradient-to-r from-gray-900 to-forest dark:from-white dark:to-forest-light bg-clip-text text-transparent block\">\n                      {stat.value}\n                    </span>\n                    <div className=\"w-8 h-1 bg-gradient-to-r from-forest to-forest-dark ml-auto mt-2 rounded-full\"></div>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <h3 className=\"text-lg font-bold text-gray-900 dark:text-white group-hover:text-forest dark:group-hover:text-forest-light transition-colors duration-300\">\n                    {stat.label}\n                  </h3>\n                  <p className=\"text-sm font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                    {stat.period}\n                  </p>\n                </div>\n\n                {/* Hover effect overlay */}\n                <div className=\"absolute inset-0 bg-gradient-to-br from-forest/8 to-forest/3 dark:from-forest/15 dark:to-forest/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Bottom decorative text */}\n        <div className=\"text-center mt-16\">\n          <p className=\"text-sm text-gray-500 dark:text-gray-400 font-medium\">\n            Updated in real-time â€¢ Powered by student participation\n          </p>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":6882},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(\"light\");\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"theme\") as Theme;\n    if (stored) {\n      setTheme(stored);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"theme\", theme);\n    document.documentElement.classList.toggle(\"dark\", theme === \"dark\");\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeProviderContext);\n  if (!context) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1167},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User | null>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":314},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/qr-utils.ts":{"content":"// Re-export from shared utilities\nexport { generateClaimCode } from \"@shared/qr-utils\";\n\nexport function formatTimeRemaining(expiresAt: string): string {\n  const now = new Date();\n  const expires = new Date(expiresAt);\n  const diff = expires.getTime() - now.getTime();\n\n  if (diff <= 0) {\n    return \"Expired\";\n  }\n\n  const totalMinutes = Math.floor(diff / (1000 * 60));\n  const hours = Math.floor(totalMinutes / 60);\n  const minutes = totalMinutes % 60;\n  \n  if (hours > 0) {\n    if (hours === 1 && minutes === 0) {\n      return \"1 hour left\";\n    } else if (hours === 1) {\n      return `1h ${minutes}m left`;\n    } else if (minutes === 0) {\n      return `${hours} hours left`;\n    } else {\n      return `${hours}h ${minutes}m left`;\n    }\n  } else {\n    if (minutes === 1) {\n      return \"1 minute left\";\n    } else {\n      return `${minutes} minutes left`;\n    }\n  }\n}\n\nexport function generateClaimCodeDataURL(claimCode: string): string {\n  // For a real implementation, you would use a claim code library like 'qrcode'\n  // For now, return a placeholder data URL\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n  canvas.width = 200;\n  canvas.height = 200;\n  \n  if (ctx) {\n    // Fill background\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(0, 0, 200, 200);\n    \n    // Draw simple claim code pattern\n    ctx.fillStyle = '#000000';\n    for (let i = 0; i < 20; i++) {\n      for (let j = 0; j < 20; j++) {\n        if ((i + j + claimCode.length) % 3 === 0) {\n          ctx.fillRect(i * 10, j * 10, 8, 8);\n        }\n      }\n    }\n    \n    // Add corner squares\n    ctx.fillRect(0, 0, 50, 50);\n    ctx.fillRect(150, 0, 50, 50);\n    ctx.fillRect(0, 150, 50, 50);\n    \n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(10, 10, 30, 30);\n    ctx.fillRect(160, 10, 30, 30);\n    ctx.fillRect(10, 160, 30, 30);\n    \n    ctx.fillStyle = '#000000';\n    ctx.fillRect(20, 20, 10, 10);\n    ctx.fillRect(170, 20, 10, 10);\n    ctx.fillRect(20, 170, 10, 10);\n  }\n  \n  return canvas.toDataURL();\n}\n","size_bytes":2025},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import React from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\n\nexport default function Home() {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  React.useEffect(() => {\n    if (!isLoading) {\n      if (!user) {\n        setLocation(\"/\");\n      } else if (user.role === \"admin\") {\n        setLocation(\"/admin\");\n      } else {\n        setLocation(\"/student\");\n      }\n    }\n  }, [user, isLoading, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-forest mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n}\n","size_bytes":849},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { StatsSection } from \"@/components/stats-section\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { Search, QrCode, CheckCircle } from \"lucide-react\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-surface dark:bg-gray-900\">\n      <Navbar />\n      \n      {/* Hero Section */}\n      <section className=\"relative min-h-[90vh] bg-gradient-to-br from-white via-forest/3 to-forest/8 dark:from-gray-900 dark:via-gray-800 dark:to-gray-700 overflow-hidden flex items-center\">\n        {/* Background decorative elements */}\n        <div className=\"absolute inset-0 opacity-60\">\n          <div className=\"absolute top-20 left-20 w-64 h-64 bg-forest/10 rounded-full blur-3xl animate-pulse\"></div>\n          <div className=\"absolute bottom-32 right-32 w-96 h-96 bg-forest/5 rounded-full blur-3xl\"></div>\n          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-[600px] h-[600px] bg-gradient-to-r from-forest/5 via-transparent to-forest/10 rounded-full blur-3xl\"></div>\n        </div>\n\n\n\n        <div className=\"relative max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 text-center z-10\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Badge */}\n            <div className=\"mb-8 animate-fade-in\">\n              <span className=\"inline-flex items-center px-6 py-3 bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm text-forest dark:text-forest-light text-sm font-semibold rounded-full shadow-lg border border-forest/20 dark:border-forest-light/20\">\n                Student Food Claiming System\n              </span>\n            </div>\n            \n            {/* Main heading */}\n            <h1 className=\"text-5xl sm:text-6xl lg:text-7xl font-bold mb-8 animate-fade-in-up\" style={{ animationDelay: '0.2s' }}>\n              <span className=\"bg-gradient-to-r from-gray-900 via-gray-700 to-gray-900 dark:from-white dark:via-gray-100 dark:to-white bg-clip-text text-transparent leading-tight\">\n                Claim Your\n              </span>\n              <br />\n              <span className=\"bg-gradient-to-r from-forest via-forest-dark to-forest bg-clip-text text-transparent\">\n                Campus Meals\n              </span>\n            </h1>\n            \n            {/* Subtitle */}\n            <p className=\"text-xl lg:text-2xl text-gray-600 dark:text-gray-300 mb-12 max-w-3xl mx-auto leading-relaxed animate-fade-in-up\" style={{ animationDelay: '0.4s' }}>\n              Transform campus dining with our innovative digital platform. \n              <span className=\"font-semibold text-forest dark:text-forest-light\"> Reduce waste, save money, </span>\n              and enjoy fresh meals with just a claim code.\n            </p>\n            \n            {/* CTA Buttons */}\n            <div className=\"flex flex-col sm:flex-row gap-6 justify-center items-center animate-fade-in-up\" style={{ animationDelay: '0.6s' }}>\n              <Button \n                className=\"group relative bg-gradient-to-r from-forest to-forest-dark hover:from-forest-dark hover:to-forest text-white px-10 py-4 text-lg font-semibold rounded-2xl shadow-2xl hover:shadow-forest/25 transition-all duration-300 hover:scale-105 border-0\"\n                onClick={async () => {\n                  await fetch('/api/seed-demo-data', { method: 'POST' });\n                  const response = await fetch('/api/demo-login/student');\n                  if (response.ok) {\n                    window.location.reload();\n                  }\n                }}\n              >\n                <div className=\"absolute inset-0 bg-gradient-to-r from-white/20 to-transparent rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                <span className=\"relative flex items-center\">\n                  Student Login\n                  <span className=\"ml-2 transform group-hover:translate-x-1 transition-transform duration-300\">â†’</span>\n                </span>\n              </Button>\n              \n              <Button \n                className=\"group relative bg-white/10 dark:bg-gray-800/50 backdrop-blur-sm border-2 border-forest/30 hover:border-forest text-forest dark:text-forest-light hover:bg-forest/5 dark:hover:bg-forest/10 px-10 py-4 text-lg font-semibold rounded-2xl shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105\"\n                onClick={async () => {\n                  await fetch('/api/seed-demo-data', { method: 'POST' });\n                  const response = await fetch('/api/demo-login/admin');\n                  if (response.ok) {\n                    window.location.reload();\n                  }\n                }}\n              >\n                <span className=\"relative flex items-center\">\n                  Admin Login\n                  <span className=\"ml-2 transform group-hover:translate-x-1 transition-transform duration-300\">â†’</span>\n                </span>\n              </Button>\n            </div>\n\n            {/* Feature highlights */}\n            <div className=\"mt-16 flex flex-wrap justify-center items-center gap-8 text-gray-600 dark:text-gray-400 animate-fade-in-up\" style={{ animationDelay: '0.8s' }}>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-forest rounded-full\"></div>\n                <span className=\"text-sm font-medium\">Real-time Availability</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-forest rounded-full\"></div>\n                <span className=\"text-sm font-medium\">Claim Code Security</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-forest rounded-full\"></div>\n                <span className=\"text-sm font-medium\">Instant Notifications</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <StatsSection />\n\n      {/* Features Section */}\n      <section className=\"relative bg-gradient-to-br from-white via-forest/2 to-white dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 py-24 overflow-hidden\">\n        {/* Background decorative elements */}\n        <div className=\"absolute inset-0 opacity-40\">\n          <div className=\"absolute top-20 right-20 w-40 h-40 bg-forest/5 rounded-full blur-3xl\"></div>\n          <div className=\"absolute bottom-20 left-20 w-56 h-56 bg-forest/8 rounded-full blur-3xl\"></div>\n        </div>\n\n        <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-20\">\n            <div className=\"inline-block mb-6\">\n              <span className=\"inline-block px-4 py-2 bg-forest/10 text-forest dark:bg-forest/20 dark:text-forest-light text-sm font-medium rounded-full\">\n                Simple & Effective\n              </span>\n            </div>\n            <h2 className=\"text-4xl lg:text-5xl font-bold bg-gradient-to-r from-gray-900 via-forest to-gray-900 dark:from-white dark:via-forest-light dark:to-white bg-clip-text text-transparent mb-6\">\n              How RePlate Works\n            </h2>\n            <p className=\"text-lg text-gray-600 dark:text-gray-300 max-w-3xl mx-auto leading-relaxed\">\n              Simple steps to reduce food waste and save money on campus meals through our innovative platform\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-12 lg:gap-16\">\n            {[\n              {\n                number: \"01\",\n                title: \"Browse Available Meals\",\n                description: \"Discover discounted meals from campus canteens with real-time availability updates and detailed nutritional information for smart dining choices.\",\n                icon: Search,\n                bgColor: \"bg-forest/10\",\n                iconColor: \"text-forest\"\n              },\n              {\n                number: \"02\", \n                title: \"Claim Your Meal\",\n                description: \"Easily secure your meal with a unique claim code that grants you access within a convenient 2-hour pickup window, ensuring your food stays fresh.\",\n                icon: QrCode,\n                bgColor: \"bg-forest/10\",\n                iconColor: \"text-forest\"\n              },\n              {\n                number: \"03\",\n                title: \"Show & Collect\", \n                description: \"Show your claim code at the canteen to collect your discounted meal, helping reduce food waste on campus while enjoying great food at lower prices.\",\n                icon: CheckCircle,\n                bgColor: \"bg-forest/10\",\n                iconColor: \"text-forest\"\n              }\n            ].map((step, index) => (\n              <div key={index} className=\"group relative\">\n                \n                \n                <div className=\"relative bg-white/80 dark:bg-gray-800/80 backdrop-blur-sm rounded-3xl p-8 lg:p-10 shadow-xl border border-gray-100/50 dark:border-gray-700/50 hover:shadow-2xl transition-all duration-500 hover:-translate-y-2 group\">\n                  {/* Hover gradient background */}\n                  <div className=\"absolute inset-0 bg-gradient-to-br from-forest/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500 rounded-3xl\"></div>\n                  \n                  <div className=\"relative z-10\">\n                    {/* Number badge */}\n                    <div className=\"flex items-center justify-between mb-8\">\n                      <div className=\"w-20 h-20 bg-gradient-to-br from-forest to-forest-dark rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\n                        <span className=\"text-white text-2xl font-bold\">{step.number}</span>\n                      </div>\n                      <div className={`w-16 h-16 ${step.bgColor} rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300`}>\n                        <step.icon className={`${step.iconColor} w-8 h-8`} />\n                      </div>\n                    </div>\n\n                    {/* Content */}\n                    <div className=\"space-y-4\">\n                      <h3 className=\"text-2xl font-bold text-gray-900 dark:text-white group-hover:text-forest dark:group-hover:text-forest-light transition-colors duration-300\">\n                        {step.title}\n                      </h3>\n                      <p className=\"text-gray-600 dark:text-gray-300 leading-relaxed text-base\">\n                        {step.description}\n                      </p>\n                    </div>\n\n                    {/* Bottom accent line */}\n                    <div className=\"mt-8 w-0 group-hover:w-full h-1 bg-gradient-to-r from-forest to-forest-dark rounded-full transition-all duration-500\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n\n          {/* Bottom CTA section */}\n          <div className=\"text-center mt-20\">\n            <div className=\"inline-flex items-center space-x-2 text-sm text-gray-500 dark:text-gray-400 font-medium\">\n              <span>Ready to start saving meals and money?</span>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":11447},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-green-50 relative overflow-hidden\">\n      {/* Floating React logos for fun */}\n\n      <Card className=\"w-full max-w-md mx-4 shadow-lg border-green-200 bg-white/95 backdrop-blur-sm relative z-10\">\n        <CardContent className=\"pt-8 pb-6 text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <AlertCircle className=\"h-12 w-12 text-green-700\" />\n          </div>\n\n          <h1 className=\"text-3xl font-extrabold text-green-800\">\n            404 - Page Not Found\n          </h1>\n\n          <p className=\"mt-3 text-sm text-green-700\">\n            This page seems to have wandered off\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":953},"client/src/pages/student-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { MealCard } from \"@/components/meal-card\";\nimport { ClaimCodeModal } from \"@/components/claim-code-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { FoodItemWithCreator, FoodClaimWithDetails } from \"@shared/schema\";\nimport { QrCode, Clock, CheckCircle, X } from \"lucide-react\";\nimport { formatTimeRemaining } from \"@/lib/qr-utils\";\n\nexport default function StudentDashboard() {\n  const { user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedMeal, setSelectedMeal] = useState<string | null>(null);\n  const [claimCodeModalOpen, setClaimCodeModalOpen] = useState(false);\n  const [claimedMeal, setClaimedMeal] = useState<(FoodClaimWithDetails & { foodItem: any }) | null>(null);\n  const [filters, setFilters] = useState({\n    canteen: \"all\",\n    mealType: \"all\",\n  });\n\n  // Redirect to login if not authenticated\n  if (!authLoading && !user) {\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n    return null;\n  }\n\n  const { data: foodItems = [], isLoading: itemsLoading } = useQuery<FoodItemWithCreator[]>({\n    queryKey: [\"/api/food-items\"],\n    enabled: !!user,\n  });\n\n  const { data: myClaims = [], isLoading: claimsLoading } = useQuery<FoodClaimWithDetails[]>({\n    queryKey: [\"/api/food-claims/my\"],\n    enabled: !!user,\n  });\n\n  const claimMutation = useMutation({\n    mutationFn: async (foodItemId: string) => {\n      const response = await apiRequest(\"POST\", \"/api/food-claims\", {\n        foodItemId,\n        quantityClaimed: 1,\n      });\n      return response.json();\n    },\n    onSuccess: (newClaim) => {\n      toast({\n        title: \"Meal Claimed Successfully!\",\n        description: \"Your claim code is ready. Show it to canteen staff to collect your meal.\",\n      });\n      \n      // Find the food item details\n      const foodItem = foodItems.find(item => item.id === newClaim.foodItemId);\n      setClaimedMeal({ ...newClaim, foodItem });\n      setClaimCodeModalOpen(true);\n      \n      // Invalidate and refetch data\n      queryClient.invalidateQueries({ queryKey: [\"/api/food-items\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/food-claims/my\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      let description = error.message || \"Something went wrong. Please try again.\";\n      if (error.message?.includes(\"already claimed\")) {\n        description = \"You have already claimed this food item. You can only claim each item once.\";\n      }\n      \n      toast({\n        title: \"Failed to Claim Meal\",\n        description,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleClaimMeal = (foodItemId: string) => {\n    if (claimMutation.isPending) return;\n    setSelectedMeal(foodItemId);\n    claimMutation.mutate(foodItemId);\n  };\n\n  // Filter food items (remove expired items and apply filters)\n  const filteredItems = foodItems.filter(item => {\n    // Remove expired items\n    const now = new Date();\n    const availableUntil = new Date(item.availableUntil);\n    if (availableUntil <= now) {\n      return false;\n    }\n    \n    // Apply canteen filter\n    if (filters.canteen !== \"all\" && item.canteenName !== filters.canteen) {\n      return false;\n    }\n    \n    // Only show items with available quantity\n    if (item.quantityAvailable <= 0) {\n      return false;\n    }\n    \n    return true;\n  });\n\n  // Get unique canteens for filter\n  const canteens = Array.from(new Set(foodItems.map(item => item.canteenName)));\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-forest mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-surface dark:bg-gray-900\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n            Student Dashboard\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300\">\n            Browse and claim meals from campus canteens\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"browse\" className=\"space-y-6\">\n          <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n            <TabsList className=\"grid grid-cols-2 max-w-md\">\n              <TabsTrigger value=\"browse\">Browse Meals</TabsTrigger>\n              <TabsTrigger value=\"claims\">My Claims</TabsTrigger>\n            </TabsList>\n\n            {/* Filters */}\n            <div className=\"flex flex-wrap gap-4\">\n              <Select value={filters.canteen} onValueChange={(value) => setFilters(prev => ({ ...prev, canteen: value }))}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"All Canteens\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Canteens</SelectItem>\n                  {canteens.map(canteen => (\n                    <SelectItem key={canteen} value={canteen}>\n                      {canteen}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n\n              <Select value={filters.mealType} onValueChange={(value) => setFilters(prev => ({ ...prev, mealType: value }))}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"All Meals\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Meals</SelectItem>\n                  <SelectItem value=\"breakfast\">Breakfast</SelectItem>\n                  <SelectItem value=\"lunch\">Lunch</SelectItem>\n                  <SelectItem value=\"dinner\">Dinner</SelectItem>\n                  <SelectItem value=\"snacks\">Snacks</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <TabsContent value=\"browse\" className=\"space-y-6\">\n            {/* Meal Cards Grid */}\n            {itemsLoading ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                {Array.from({ length: 8 }).map((_, i) => (\n                  <div key={i} className=\"bg-white dark:bg-gray-900 rounded-xl border border-gray-200 dark:border-gray-800 overflow-hidden\">\n                    <div className=\"w-full h-48 bg-gray-200 dark:bg-gray-800 animate-pulse\"></div>\n                    <div className=\"p-4 space-y-3\">\n                      <div className=\"h-5 bg-gray-200 dark:bg-gray-800 rounded animate-pulse\"></div>\n                      <div className=\"h-4 bg-gray-200 dark:bg-gray-800 rounded animate-pulse w-3/4\"></div>\n                      <div className=\"h-4 bg-gray-200 dark:bg-gray-800 rounded animate-pulse w-1/2\"></div>\n                      <div className=\"h-10 bg-gray-200 dark:bg-gray-800 rounded animate-pulse\"></div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : filteredItems.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <div className=\"text-gray-400 mb-4\">\n                  <QrCode className=\"w-16 h-16 mx-auto\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                  No meals available\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-400\">\n                  Check back later for new meal offerings from campus canteens.\n                </p>\n              </div>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n                {filteredItems.map((meal) => (\n                  <MealCard\n                    key={meal.id}\n                    meal={meal}\n                    onClaim={handleClaimMeal}\n                    isLoading={claimMutation.isPending && selectedMeal === meal.id}\n                    userClaims={myClaims}\n                  />\n                ))}\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"claims\" className=\"space-y-6\">\n            {claimsLoading ? (\n              <div className=\"space-y-4\">\n                {Array.from({ length: 3 }).map((_, i) => (\n                  <Card key={i}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className=\"w-16 h-16 bg-gray-200 dark:bg-gray-800 rounded-lg animate-pulse\"></div>\n                        <div className=\"flex-1 space-y-2\">\n                          <div className=\"h-5 bg-gray-200 dark:bg-gray-800 rounded animate-pulse\"></div>\n                          <div className=\"h-4 bg-gray-200 dark:bg-gray-800 rounded animate-pulse w-3/4\"></div>\n                        </div>\n                        <div className=\"w-20 h-8 bg-gray-200 dark:bg-gray-800 rounded animate-pulse\"></div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : myClaims.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <div className=\"text-gray-400 mb-4\">\n                  <Clock className=\"w-16 h-16 mx-auto\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                  No claims yet\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                  Start browsing meals to make your first claim.\n                </p>\n                <Button \n                  onClick={() => (document.querySelector('[value=\"browse\"]') as HTMLElement)?.click()}\n                  className=\"bg-forest hover:bg-forest-dark text-white\"\n                >\n                  Browse Meals\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {myClaims.map((claim) => (\n                  <Card key={claim.id}>\n                    <CardContent className=\"p-6\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-lg flex items-center justify-center\">\n                            {claim.status === \"claimed\" ? (\n                              <CheckCircle className=\"w-8 h-8 text-green-600\" />\n                            ) : claim.status === \"expired\" ? (\n                              <X className=\"w-8 h-8 text-red-600\" />\n                            ) : (\n                              <QrCode className=\"w-8 h-8 text-forest\" />\n                            )}\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold text-gray-900 dark:text-white\">\n                              {claim.foodItem.name}\n                            </h3>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                              {claim.foodItem.canteenName}\n                            </p>\n                            <p className=\"text-sm text-gray-500 dark:text-gray-500\">\n                              Claimed on {new Date(claim.createdAt || '').toLocaleDateString()}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge \n                            variant={\n                              claim.status === \"claimed\" ? \"default\" :\n                              claim.status === \"expired\" ? \"destructive\" :\n                              \"secondary\"\n                            }\n                            className=\"mb-2\"\n                          >\n                            {claim.status.charAt(0).toUpperCase() + claim.status.slice(1)}\n                          </Badge>\n                          {claim.status === \"reserved\" && (\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                              Expires: {formatTimeRemaining(claim.expiresAt.toString())}\n                            </p>\n                          )}\n                          {claim.status === \"claimed\" && claim.claimedAt && (\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                              Collected: {new Date(claim.claimedAt).toLocaleDateString()}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                      {claim.status === \"reserved\" && (\n                        <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setClaimedMeal(claim as any);\n                              setClaimCodeModalOpen(true);\n                            }}\n                          >\n                            <QrCode className=\"w-4 h-4 mr-2\" />\n                            View Claim Code\n                          </Button>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      <ClaimCodeModal\n        isOpen={claimCodeModalOpen}\n        onClose={() => setClaimCodeModalOpen(false)}\n        claim={claimedMeal}\n      />\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":14996},"client/src/components/layout/footer.tsx":{"content":"import { Leaf } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport function Footer() {\n  return (\n    <footer className=\"bg-gray-50 dark:bg-gray-900 text-gray-700 dark:text-white py-12\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"border-t border-gray-200 dark:border-gray-800 mt-8 pt-8 text-center text-gray-500 dark:text-gray-400\">\n          <p>&copy; 2024 RePlate Campus. All rights reserved. Built for sustainable campus dining.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}","size_bytes":537},"client/src/components/layout/navbar.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { Button } from \"@/components/ui/button\";\nimport { Leaf, Sun, Moon, User, LogOut, Calendar } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Link } from \"wouter\";\n\nexport function Navbar() {\n  const { user, isAuthenticated } = useAuth();\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <nav className=\"relative bg-white/95 dark:bg-gray-900/95 backdrop-blur-md shadow-xl border-b border-gray-100/50 dark:border-gray-700/50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-20\">\n          {/* Logo and Brand */}\n          <Link href=\"/\" className=\"group flex items-center space-x-3\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-forest to-forest-dark rounded-2xl flex items-center justify-center shadow-lg group-hover:shadow-forest/25 transition-all duration-300 group-hover:scale-105\">\n              <Leaf className=\"text-white w-6 h-6 group-hover:rotate-12 transition-transform duration-300\" />\n            </div>\n            <div className=\"flex flex-col\">\n              <span className=\"text-2xl font-bold bg-gradient-to-r from-gray-900 via-forest to-gray-900 dark:from-white dark:via-forest-light dark:to-white bg-clip-text text-transparent\">\n                RePlate\n              </span>\n              <span className=\"text-xs text-gray-500 dark:text-gray-400 font-medium -mt-1\">\n                Campus Dining\n              </span>\n            </div>\n          </Link>\n\n          {/* User Info and Actions */}\n          <div className=\"flex items-center space-x-6\">\n            {isAuthenticated && user ? (\n              <>\n                \n                \n                <div className=\"flex items-center space-x-3\">\n                  {user.role === \"student\" && (\n                    <Link href=\"/student\">\n                      <Button className=\"bg-forest/10 hover:bg-forest/20 text-forest dark:bg-forest/20 dark:hover:bg-forest/30 dark:text-forest-light border-forest/20 px-4 py-2 rounded-xl font-medium transition-all duration-300 hover:scale-105\">\n                        Dashboard\n                      </Button>\n                    </Link>\n                  )}\n                  \n                  {user.role === \"admin\" && (\n                    <Link href=\"/admin\">\n                      <Button className=\"bg-forest/10 hover:bg-forest/20 text-forest dark:bg-forest/20 dark:hover:bg-forest/30 dark:text-forest-light border-forest/20 px-4 py-2 rounded-xl font-medium transition-all duration-300 hover:scale-105\">\n                        Admin Dashboard\n                      </Button>\n                    </Link>\n                  )}\n                </div>\n\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button className=\"w-10 h-10 p-0 bg-gray-100 hover:bg-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 rounded-xl transition-all duration-300 hover:scale-105\">\n                      <User className=\"h-5 w-5 text-gray-600 dark:text-gray-300\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"bg-white/95 dark:bg-gray-800/95 backdrop-blur-md border border-gray-200/50 dark:border-gray-700/50 shadow-xl rounded-xl\">\n                    <DropdownMenuItem className=\"hover:bg-gray-100/80 dark:hover:bg-gray-700/80 rounded-lg\">\n                      <User className=\"mr-2 h-4 w-4\" />\n                      Profile\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator className=\"bg-gray-200/50 dark:bg-gray-700/50\" />\n                    <DropdownMenuItem \n                      onClick={() => fetch('/api/auth/logout', { method: 'POST' }).then(() => window.location.href = '/')}\n                      className=\"hover:bg-red-50 dark:hover:bg-red-900/20 text-red-600 dark:text-red-400 rounded-lg cursor-pointer\"\n                    >\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      Logout\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </>\n            ) : null}\n\n            <Button\n              onClick={toggleTheme}\n              className=\"w-10 h-10 p-0 bg-gradient-to-br from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-700 hover:from-gray-200 hover:to-gray-300 dark:hover:from-gray-700 dark:hover:to-gray-600 rounded-xl shadow-lg transition-all duration-300 hover:scale-105\"\n            >\n              {theme === \"light\" ? (\n                <Sun className=\"h-5 w-5 text-yellow-500\" />\n              ) : (\n                <Moon className=\"h-5 w-5 text-blue-400\" />\n              )}\n            </Button>\n          </div>\n        </div>\n      </div>\n    </nav>\n  );\n}\n","size_bytes":5023},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin-dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Navbar } from \"@/components/layout/navbar\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { insertFoodItemSchema } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport type { FoodItem, FoodDonationWithDetails } from \"@shared/schema\";\n\ninterface CampusStats {\n  totalMealsSaved: number;\n  activeStudents: number;\n  partnerCanteens: number;\n  totalSavings: number;\n  foodProvided: number;\n  wastedFood: number;\n  claimedFood: number;\n  carbonFootprintSaved: number;\n  waterFootprintSaved: number;\n}\nimport { Plus, Utensils, TrendingUp, DollarSign, Edit, Trash2, MoreHorizontal, ShieldCheck, CheckCircle, Heart, Users, Phone, User, Clock, AlertTriangle, Leaf, Droplets, Recycle, CheckSquare, Package, Calendar } from \"lucide-react\";\nimport { EventCalendar } from \"@/components/calendar/event-calendar\";\nimport { formatTimeRemaining } from \"@/lib/qr-utils\";\nimport { z } from \"zod\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nconst formSchema = insertFoodItemSchema.omit({ createdBy: true }).extend({\n  availableUntil: z.string().min(1, \"Available until time is required\"),\n  imageUrl: z.string().optional(),\n  canteenLocation: z.string().optional(),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nexport default function AdminDashboard() {\n  const { user, isLoading: authLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [addItemModalOpen, setAddItemModalOpen] = useState(false);\n  const [editingItem, setEditingItem] = useState<FoodItem | null>(null);\n  const [claimCode, setClaimCode] = useState(\"\");\n  const [verificationResult, setVerificationResult] = useState<any>(null);\n  const [ngoModalOpen, setNgoModalOpen] = useState(false);\n  const [selectedDonation, setSelectedDonation] = useState<FoodDonationWithDetails | null>(null);\n  const [ngoForm, setNgoForm] = useState({\n    ngoName: \"\",\n    ngoContactPerson: \"\",\n    ngoPhoneNumber: \"\",\n  });\n\n  // Redirect if not admin\n  if (!authLoading && (!user || user.role !== \"admin\")) {\n    setTimeout(() => {\n      window.location.href = \"/\";\n    }, 500);\n    return null;\n  }\n\n  const { data: myItems = [], isLoading: itemsLoading } = useQuery<FoodItem[]>({\n    queryKey: [\"/api/food-items/my\"],\n    enabled: !!user && user.role === \"admin\",\n  });\n\n  // Fetch donations\n  const { data: donations = [], isLoading: donationsLoading } = useQuery<FoodDonationWithDetails[]>({\n    queryKey: [\"/api/donations\"],\n    enabled: !!user && user.role === \"admin\",\n  });\n\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      canteenName: \"\",\n      canteenLocation: \"\",\n      quantityAvailable: 1,\n      imageUrl: \"\",\n      availableUntil: \"\",\n      isActive: true,\n    },\n  });\n\n  const addItemMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      // Transform the data to match the backend schema\n      const transformedData = {\n        ...data,\n        availableUntil: data.availableUntil, // Keep as string for timestamp mode\n        imageUrl: data.imageUrl || null,\n        canteenLocation: data.canteenLocation || null,\n      };\n      \n      const response = await apiRequest(\"POST\", \"/api/food-items\", transformedData);\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error(\"API Error:\", errorData);\n        throw new Error(errorData.message || \"Failed to create food item\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Food Item Added\",\n        description: \"Your food item has been added successfully.\",\n      });\n      setAddItemModalOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/food-items/my\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/food-items\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Failed to Add Item\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateItemMutation = useMutation({\n    mutationFn: async (data: FormData & { id: string }) => {\n      const { id, ...updateData } = data;\n      // Transform the data to match the backend schema\n      const transformedData = {\n        ...updateData,\n        availableUntil: updateData.availableUntil, // Keep as string for timestamp mode\n        imageUrl: updateData.imageUrl || null,\n        canteenLocation: updateData.canteenLocation || null,\n      };\n      \n      const response = await apiRequest(\"PUT\", `/api/food-items/${id}`, transformedData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Food Item Updated\",\n        description: \"Your food item has been updated successfully.\",\n      });\n      setEditingItem(null);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/food-items/my\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/food-items\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Failed to Update Item\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteItemMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/food-items/${id}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Food Item Deleted\",\n        description: \"The food item has been removed successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/food-items/my\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/food-items\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Failed to Delete Item\",\n        description: error.message || \"Something went wrong. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const verifyClaimMutation = useMutation({\n    mutationFn: async (code: string) => {\n      const response = await apiRequest(\"POST\", \"/api/food-claims/verify\", { claimCode: code });\n      return response.json();\n    },\n    onSuccess: (result) => {\n      setVerificationResult(result);\n      if (result.success) {\n        toast({\n          title: \"Claim Verified\",\n          description: `Meal \"${result.claim.foodItem.name}\" verified for student.`,\n        });\n      } else {\n        toast({\n          title: \"Verification Failed\",\n          description: result.message,\n          variant: \"destructive\",\n        });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Verification Error\",\n        description: error.message || \"Something went wrong.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Donation mutations\n  const transferExpiredMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/donations/transfer-expired\", {});\n      if (!response.ok) {\n        throw new Error(\"Failed to transfer expired items\");\n      }\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Expired Items Transferred\",\n        description: `${data.transferredCount} expired food items have been transferred to donations.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/donations\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/food-items/my\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to transfer expired items.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const reserveDonationMutation = useMutation({\n    mutationFn: async ({ id, ngoInfo }: { id: string; ngoInfo: any }) => {\n      const response = await apiRequest(\"PUT\", `/api/donations/${id}/reserve`, ngoInfo);\n      if (!response.ok) {\n        throw new Error(\"Failed to reserve donation\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Donation Reserved\",\n        description: \"The food item has been reserved for NGO collection.\",\n      });\n      setNgoModalOpen(false);\n      setSelectedDonation(null);\n      setNgoForm({ ngoName: \"\", ngoContactPerson: \"\", ngoPhoneNumber: \"\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/donations\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to reserve donation.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const collectDonationMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"PUT\", `/api/donations/${id}/collect`, {});\n      if (!response.ok) {\n        throw new Error(\"Failed to mark donation as collected\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Donation Collected\",\n        description: \"The food item has been marked as collected by NGO.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/donations\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to mark donation as collected.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const completeClaimMutation = useMutation({\n    mutationFn: async (claimId: string) => {\n      const response = await apiRequest(\"POST\", `/api/food-claims/${claimId}/complete`, {});\n      return response.json();\n    },\n    onSuccess: () => {\n      setVerificationResult(null);\n      setClaimCode(\"\");\n      toast({\n        title: \"Meal Collected\",\n        description: \"Student has successfully collected their meal.\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to complete claim.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    if (editingItem) {\n      updateItemMutation.mutate({ ...data, id: editingItem.id });\n    } else {\n      addItemMutation.mutate(data);\n    }\n  };\n\n  const handleEdit = (item: FoodItem) => {\n    setEditingItem(item);\n    const availableUntil = new Date(item.availableUntil);\n    const localDateTime = new Date(availableUntil.getTime() - availableUntil.getTimezoneOffset() * 60000)\n      .toISOString()\n      .slice(0, 16);\n    \n    form.reset({\n      name: item.name,\n      description: item.description || \"\",\n      canteenName: item.canteenName,\n      canteenLocation: item.canteenLocation || \"\",\n      quantityAvailable: item.quantityAvailable,\n      imageUrl: item.imageUrl || \"\",\n      availableUntil: localDateTime,\n      isActive: item.isActive,\n    });\n    setAddItemModalOpen(true);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this food item?\")) {\n      deleteItemMutation.mutate(id);\n    }\n  };\n\n  const handleModalClose = () => {\n    setAddItemModalOpen(false);\n    setEditingItem(null);\n    form.reset();\n  };\n\n  // Fetch comprehensive stats\n  const { data: stats, isLoading: statsLoading } = useQuery<CampusStats>({\n    queryKey: [\"/api/stats\"],\n    enabled: !!user && user.role === \"admin\",\n  });\n\n  // Calculate local stats\n  const activeItems = myItems.filter(item => item.isActive).length;\n  const totalQuantity = myItems.reduce((sum, item) => sum + item.quantityAvailable, 0);\n\n  if (authLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-forest mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-surface dark:bg-gray-900\">\n      <Navbar />\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white mb-2\">\n            Admin Dashboard\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-300\">\n            Manage food items and verify student claims\n          </p>\n        </div>\n\n        {/* Comprehensive Stats Dashboard */}\n        <div className=\"space-y-8 mb-8\">\n          {/* Primary Metrics */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-gray-900 dark:text-white font-semibold text-xl\">{stats?.foodProvided || 0}</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Food Provided</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-gray-900 dark:text-white font-semibold text-xl\">{stats?.claimedFood || 0}</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Successfully Claimed</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-gray-900 dark:text-white font-semibold text-xl\">{stats?.wastedFood || 0}</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Food Wasted</p>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-4\">\n                <div className=\"text-center\">\n                  <p className=\"text-gray-900 dark:text-white font-semibold text-xl\">{activeItems}</p>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">Currently Active</p>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Environmental Impact */}\n          <div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-gray-900 dark:text-white font-semibold text-xl\">{(stats?.carbonFootprintSaved || 0).toFixed(1)} kg</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">COâ‚‚ Saved</p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-gray-900 dark:text-white font-semibold text-xl\">{(stats?.waterFootprintSaved || 0).toLocaleString()} L</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Water Saved</p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-gray-900 dark:text-white font-semibold text-xl\">{stats?.totalMealsSaved || 0}</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Meals Saved</p>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-4\">\n                  <div className=\"text-center\">\n                    <p className=\"text-gray-900 dark:text-white font-semibold text-xl\">{((stats?.wastedFood || 0) === 0 ? 100 : Math.max(0, 100 - ((stats?.wastedFood || 0) / (stats?.foodProvided || 1)) * 100)).toFixed(0)}%</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Waste Reduction</p>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n        </div>\n\n        {/* Main Content Tabs */}\n        <Tabs defaultValue=\"verify\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"verify\">Verify Claims</TabsTrigger>\n            <TabsTrigger value=\"manage\">Manage Items</TabsTrigger>\n            <TabsTrigger value=\"unclaimed\">Unclaimed</TabsTrigger>\n            <TabsTrigger value=\"calendar\" data-testid=\"tab-calendar\">\n              <Calendar className=\"h-4 w-4 mr-2\" />\n              Calendar\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"verify\" className=\"space-y-6\">\n            {/* Claim Code Verification */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <ShieldCheck className=\"w-5 h-5\" />\n                  Verify Claim Code\n                </CardTitle>\n                <p className=\"text-gray-600 dark:text-gray-400\">\n                  Enter a student's claim code to verify and complete meal collection\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"flex gap-4\">\n                    <Input\n                      placeholder=\"Enter claim code (e.g., ABC-XYZ)\"\n                      value={claimCode}\n                      onChange={(e) => setClaimCode(e.target.value.toUpperCase())}\n                      className=\"flex-1\"\n                      maxLength={7}\n                    />\n                    <Button\n                      onClick={() => verifyClaimMutation.mutate(claimCode)}\n                      disabled={!claimCode.trim() || verifyClaimMutation.isPending}\n                      className=\"bg-forest hover:bg-forest-dark text-white\"\n                    >\n                      {verifyClaimMutation.isPending ? \"Verifying...\" : \"Verify\"}\n                    </Button>\n                  </div>\n\n                  {verificationResult && (\n                    <div className=\"mt-4 p-4 border rounded-lg\">\n                      {verificationResult.success ? (\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center gap-2\">\n                            <Badge variant=\"default\" className=\"bg-green-100 text-green-800\">\n                              Valid Claim\n                            </Badge>\n                          </div>\n                          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                            <div>\n                              <strong>Student:</strong> {verificationResult.claim.user.firstName} {verificationResult.claim.user.lastName}\n                            </div>\n                            <div>\n                              <strong>Email:</strong> {verificationResult.claim.user.email}\n                            </div>\n                            <div>\n                              <strong>Meal:</strong> {verificationResult.claim.foodItem.name}\n                            </div>\n                            <div>\n                              <strong>Canteen:</strong> {verificationResult.claim.foodItem.canteenName}\n                            </div>\n                            <div>\n                              <strong>Status:</strong> <span className=\"text-green-600 font-medium\">FREE</span>\n                            </div>\n                            <div>\n                              <strong>Status:</strong> {verificationResult.claim.status}\n                            </div>\n                          </div>\n                          <Button\n                            onClick={() => completeClaimMutation.mutate(verificationResult.claim.id)}\n                            disabled={completeClaimMutation.isPending}\n                            className=\"w-full bg-green-600 hover:bg-green-700 text-white\"\n                          >\n                            {completeClaimMutation.isPending ? \"Processing...\" : \"Complete Collection\"}\n                          </Button>\n                        </div>\n                      ) : (\n                        <div className=\"text-red-600\">\n                          <Badge variant=\"destructive\">Invalid</Badge>\n                          <p className=\"mt-2\">{verificationResult.message}</p>\n                        </div>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"manage\" className=\"space-y-6\">\n            {/* Add Item Button */}\n            <div className=\"flex justify-end\">\n              <Button \n                onClick={() => setAddItemModalOpen(true)}\n                className=\"bg-forest hover:bg-forest-dark text-white\"\n                data-testid=\"button-add-new-item\"\n              >\n                <Plus className=\"w-4 h-4 mr-2\" />\n                Add New Item\n              </Button>\n              \n              <Dialog open={addItemModalOpen} onOpenChange={handleModalClose}>\n              <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" aria-describedby=\"dialog-description\">\n                <DialogHeader>\n                  <DialogTitle>\n                    {editingItem ? \"Edit Food Item\" : \"Add New Food Item\"}\n                  </DialogTitle>\n                  <p id=\"dialog-description\" className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    {editingItem ? \"Update the details for this food item\" : \"Fill in the details to add a new food item to your canteen\"}\n                  </p>\n                </DialogHeader>\n                \n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Food Item Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., Grilled Chicken Sandwich\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"canteenName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Canteen Name</FormLabel>\n                            <FormControl>\n                              <Input placeholder=\"e.g., North Campus Dining\" {...field} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Description</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Describe the food item...\"\n                              className=\"min-h-[80px]\"\n                              {...field}\n                              value={field.value || \"\"}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"quantityAvailable\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Quantity Available</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\" \n                              min=\"1\" \n                              placeholder=\"5\" \n                              {...field} \n                              onChange={(e) => field.onChange(parseInt(e.target.value) || 1)}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <FormField\n                        control={form.control}\n                        name=\"availableUntil\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Available Until</FormLabel>\n                            <FormControl>\n                              <Input \n                                type=\"datetime-local\" \n                                {...field}\n                                data-testid=\"input-available-until\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={form.control}\n                        name=\"imageUrl\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Image URL (Optional)</FormLabel>\n                            <FormControl>\n                              <Input \n                                placeholder=\"https://example.com/image.jpg\" \n                                {...field}\n                                value={field.value || \"\"}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n\n                    <FormField\n                      control={form.control}\n                      name=\"canteenLocation\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Canteen Location (Optional)</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"e.g., Building A, Floor 1\" {...field} value={field.value || \"\"} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex justify-end space-x-2 pt-4\">\n                      <Button \n                        type=\"button\" \n                        variant=\"outline\" \n                        onClick={handleModalClose}\n                        disabled={addItemMutation.isPending || updateItemMutation.isPending}\n                      >\n                        Cancel\n                      </Button>\n                      <Button \n                        type=\"submit\" \n                        className=\"bg-forest hover:bg-forest-dark text-white\"\n                        disabled={addItemMutation.isPending || updateItemMutation.isPending}\n                        data-testid=\"button-submit-item\"\n\n                      >\n                        {addItemMutation.isPending || updateItemMutation.isPending \n                          ? \"Saving...\" \n                          : editingItem \n                            ? \"Update Item\" \n                            : \"Add Item\"\n                        }\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n            </div>\n\n            {/* Food Items Table */}\n            <Card>\n          <CardHeader>\n            <CardTitle>Your Food Items</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {itemsLoading ? (\n              <div className=\"space-y-4\">\n                {Array.from({ length: 5 }).map((_, i) => (\n                  <div key={i} className=\"flex items-center space-x-4 p-4 border border-gray-200 dark:border-gray-800 rounded-lg\">\n                    <div className=\"w-12 h-12 bg-gray-200 dark:bg-gray-800 rounded-lg animate-pulse\"></div>\n                    <div className=\"flex-1 space-y-2\">\n                      <div className=\"h-4 bg-gray-200 dark:bg-gray-800 rounded animate-pulse\"></div>\n                      <div className=\"h-3 bg-gray-200 dark:bg-gray-800 rounded animate-pulse w-3/4\"></div>\n                    </div>\n                    <div className=\"w-20 h-8 bg-gray-200 dark:bg-gray-800 rounded animate-pulse\"></div>\n                  </div>\n                ))}\n              </div>\n            ) : myItems.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <div className=\"text-gray-400 mb-4\">\n                  <Utensils className=\"w-16 h-16 mx-auto\" />\n                </div>\n                <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-2\">\n                  No food items yet\n                </h3>\n                <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                  Start by adding your first food item to the system.\n                </p>\n                <Button \n                  onClick={() => setAddItemModalOpen(true)}\n                  className=\"bg-forest hover:bg-forest-dark text-white\"\n                  data-testid=\"button-add-first-item\"\n                >\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Add First Item\n                </Button>\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Food Item</TableHead>\n                      <TableHead>Canteen</TableHead>\n                      <TableHead>Quantity Available</TableHead>\n                      <TableHead>Expires In</TableHead>\n                      <TableHead>Status</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {myItems.map((item) => (\n                      <TableRow key={item.id}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-12 h-12 bg-gray-200 dark:bg-gray-800 rounded-lg flex-shrink-0 flex items-center justify-center\">\n                              {item.imageUrl ? (\n                                <img\n                                  src={item.imageUrl}\n                                  alt={item.name}\n                                  className=\"w-full h-full object-cover rounded-lg\"\n                                />\n                              ) : (\n                                <Utensils className=\"w-6 h-6 text-gray-400\" />\n                              )}\n                            </div>\n                            <div>\n                              <p className=\"font-medium text-gray-900 dark:text-white\">\n                                {item.name}\n                              </p>\n                              <p className=\"text-sm text-gray-500 dark:text-gray-400 line-clamp-1\">\n                                {item.description}\n                              </p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-gray-600 dark:text-gray-400\">\n                          {item.canteenName}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            <span className=\"text-gray-900 dark:text-white font-medium\">\n                              {item.quantityAvailable}\n                            </span>\n                            <Badge variant=\"outline\" className=\"text-green-600 border-green-600 text-xs\">\n                              FREE\n                            </Badge>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-gray-600 dark:text-gray-400\">\n                          {formatTimeRemaining(item.availableUntil.toString())}\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={item.isActive ? \"default\" : \"secondary\"}>\n                            {item.isActive ? \"Active\" : \"Inactive\"}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button variant=\"ghost\" size=\"sm\" className=\"w-8 h-8 p-0\">\n                                <MoreHorizontal className=\"h-4 w-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuItem onClick={() => handleEdit(item)}>\n                                <Edit className=\"mr-2 h-4 w-4\" />\n                                Edit\n                              </DropdownMenuItem>\n                              <DropdownMenuItem \n                                onClick={() => handleDelete(item.id)}\n                                className=\"text-red-600 focus:text-red-600\"\n                              >\n                                <Trash2 className=\"mr-2 h-4 w-4\" />\n                                Delete\n                              </DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n          </TabsContent>\n\n          <TabsContent value=\"unclaimed\" className=\"space-y-6\">\n            {/* Expiry Status */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Clock className=\"w-5 h-5\" />\n                  Expiry Status Monitor\n                </CardTitle>\n                <p className=\"text-gray-600 dark:text-gray-400\">\n                  Monitor unclaimed food items approaching expiry. Items automatically transfer to waste after expiry time.\n                </p>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n                  <div className=\"p-4 bg-red-50 dark:bg-red-900/20 rounded-lg border border-red-200 dark:border-red-800\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <AlertTriangle className=\"w-5 h-5 text-red-600\" />\n                      <span className=\"font-medium text-red-800 dark:text-red-200\">Expired</span>\n                    </div>\n                    <p className=\"text-2xl font-bold text-red-800 dark:text-red-200\">\n                      {myItems.filter(item => new Date(item.availableUntil) < new Date()).length}\n                    </p>\n                    <p className=\"text-sm text-red-600 dark:text-red-400\">Auto-transferred to waste</p>\n                  </div>\n                  <div className=\"p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg border border-orange-200 dark:border-orange-800\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <AlertTriangle className=\"w-5 h-5 text-orange-600\" />\n                      <span className=\"font-medium text-orange-800 dark:text-orange-200\">Critical</span>\n                    </div>\n                    <p className=\"text-2xl font-bold text-orange-800 dark:text-orange-200\">\n                      {myItems.filter(item => {\n                        const now = new Date();\n                        const expiryTime = new Date(item.availableUntil);\n                        const timeDiff = expiryTime.getTime() - now.getTime();\n                        return timeDiff > 0 && timeDiff <= 30 * 60 * 1000; // 30 minutes\n                      }).length}\n                    </p>\n                    <p className=\"text-sm text-orange-600 dark:text-orange-400\">Within 30 minutes</p>\n                  </div>\n                  <div className=\"p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg border border-yellow-200 dark:border-yellow-800\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <Clock className=\"w-5 h-5 text-yellow-600\" />\n                      <span className=\"font-medium text-yellow-800 dark:text-yellow-200\">Warning</span>\n                    </div>\n                    <p className=\"text-2xl font-bold text-yellow-800 dark:text-yellow-200\">\n                      {myItems.filter(item => {\n                        const now = new Date();\n                        const expiryTime = new Date(item.availableUntil);\n                        const timeDiff = expiryTime.getTime() - now.getTime();\n                        return timeDiff > 30 * 60 * 1000 && timeDiff <= 2 * 60 * 60 * 1000; // 30 min to 2 hours\n                      }).length}\n                    </p>\n                    <p className=\"text-sm text-yellow-600 dark:text-yellow-400\">Within 2 hours</p>\n                  </div>\n                  <div className=\"p-4 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-800\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                      <span className=\"font-medium text-green-800 dark:text-green-200\">Active</span>\n                    </div>\n                    <p className=\"text-2xl font-bold text-green-800 dark:text-green-200\">\n                      {myItems.filter(item => {\n                        const now = new Date();\n                        const expiryTime = new Date(item.availableUntil);\n                        const timeDiff = expiryTime.getTime() - now.getTime();\n                        return timeDiff > 2 * 60 * 60 * 1000; // More than 2 hours\n                      }).length}\n                    </p>\n                    <p className=\"text-sm text-green-600 dark:text-green-400\">Available for claims</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Unclaimed Items List */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <AlertTriangle className=\"w-5 h-5\" />\n                  Unclaimed Food Items\n                </CardTitle>\n                <p className=\"text-gray-600 dark:text-gray-400\">\n                  Items that haven't been claimed will automatically transfer to waste after expiry time.\n                </p>\n              </CardHeader>\n              <CardContent>\n                {itemsLoading ? (\n                  <div className=\"text-center py-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-forest mx-auto mb-4\"></div>\n                    <p className=\"text-gray-600 dark:text-gray-400\">Loading items...</p>\n                  </div>\n                ) : myItems.length === 0 ? (\n                  <div className=\"text-center py-8\">\n                    <Clock className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">\n                      No Items Added Yet\n                    </h3>\n                    <p className=\"text-gray-600 dark:text-gray-400\">\n                      Add food items to monitor their expiry status\n                    </p>\n                  </div>\n                ) : (\n                  <div className=\"overflow-x-auto\">\n                    <Table>\n                      <TableHeader>\n                        <TableRow>\n                          <TableHead>Food Item</TableHead>\n                          <TableHead>Quantity Available</TableHead>\n                          <TableHead>Time Until Expiry</TableHead>\n                          <TableHead>Status</TableHead>\n                          <TableHead>Auto Transfer</TableHead>\n                        </TableRow>\n                      </TableHeader>\n                      <TableBody>\n                        {myItems.map((item) => {\n                          const now = new Date();\n                          const expiryTime = new Date(item.availableUntil);\n                          const timeDiff = expiryTime.getTime() - now.getTime();\n                          const isExpired = timeDiff <= 0;\n                          const isExpiringSoon = timeDiff > 0 && timeDiff <= 2 * 60 * 60 * 1000; // 2 hours\n                          const isExpiringCritical = timeDiff > 0 && timeDiff <= 30 * 60 * 1000; // 30 minutes\n                          const isExpiringWarning = timeDiff > 30 * 60 * 1000 && timeDiff <= 60 * 60 * 1000; // 1 hour\n                          \n                          // Determine status and variant based on actual item status\n                          let status = item.isActive ? \"Active\" : \"Inactive\";\n                          let statusVariant: \"default\" | \"secondary\" | \"destructive\" | \"outline\" = item.isActive ? \"default\" : \"secondary\";\n                          let statusColor = \"text-green-600\";\n                          \n                          if (isExpired) {\n                            status = item.isActive ? \"Active\" : \"Inactive\";\n                            statusVariant = item.isActive ? \"default\" : \"secondary\";\n                            statusColor = item.isActive ? \"text-green-600\" : \"text-gray-600\";\n                          } else if (isExpiringCritical) {\n                            status = \"Critical - 30min\";\n                            statusVariant = \"destructive\";\n                            statusColor = \"text-red-600\";\n                          } else if (isExpiringWarning) {\n                            status = \"Warning - 1hr\";\n                            statusVariant = \"secondary\";\n                            statusColor = \"text-yellow-600\";\n                          } else if (isExpiringSoon) {\n                            status = \"Expiring Soon\";\n                            statusVariant = \"secondary\";\n                            statusColor = \"text-yellow-600\";\n                          }\n                          \n                          return (\n                            <TableRow key={item.id}>\n                              <TableCell>\n                                <div className=\"flex items-center space-x-3\">\n                                  <div className=\"w-12 h-12 bg-gray-200 dark:bg-gray-800 rounded-lg flex-shrink-0 flex items-center justify-center\">\n                                    {item.imageUrl ? (\n                                      <img\n                                        src={item.imageUrl}\n                                        alt={item.name}\n                                        className=\"w-full h-full object-cover rounded-lg\"\n                                      />\n                                    ) : (\n                                      <Utensils className=\"w-6 h-6 text-gray-400\" />\n                                    )}\n                                  </div>\n                                  <div>\n                                    <p className=\"font-medium text-gray-900 dark:text-white\">\n                                      {item.name}\n                                    </p>\n                                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                                      {item.canteenName}\n                                    </p>\n                                  </div>\n                                </div>\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"flex flex-col\">\n                                  <span className=\"text-gray-900 dark:text-white font-medium\">\n                                    {item.quantityAvailable}\n                                  </span>\n                                  {item.quantityAvailable === 0 && (\n                                    <span className=\"text-xs text-green-600\">All claimed</span>\n                                  )}\n                                </div>\n                              </TableCell>\n                              <TableCell>\n                                <span className={`font-medium ${statusColor}`}>\n                                  {formatTimeRemaining(item.availableUntil.toString())}\n                                </span>\n                              </TableCell>\n                              <TableCell>\n                                <Badge variant={statusVariant}>\n                                  {status}\n                                </Badge>\n                              </TableCell>\n                              <TableCell>\n                                <div className=\"flex items-center gap-2\">\n                                  {isExpired ? (\n                                    <div className=\"flex flex-col gap-1\">\n                                      <Badge variant=\"outline\" className=\"text-red-600 border-red-600\">\n                                        <AlertTriangle className=\"w-3 h-3 mr-1\" />\n                                        Auto-transferred\n                                      </Badge>\n                                    </div>\n                                  ) : isExpiringCritical ? (\n                                    <div className=\"flex flex-col gap-1\">\n                                      <Badge variant=\"outline\" className=\"text-red-600 border-red-600\">\n                                        <AlertTriangle className=\"w-3 h-3 mr-1\" />\n                                        Transfer in {Math.ceil(timeDiff / (60 * 1000))}min\n                                      </Badge>\n                                    </div>\n                                  ) : isExpiringWarning ? (\n                                    <div className=\"flex flex-col gap-1\">\n                                      <Badge variant=\"outline\" className=\"text-yellow-600 border-yellow-600\">\n                                        <Clock className=\"w-3 h-3 mr-1\" />\n                                        Transfer in {Math.ceil(timeDiff / (60 * 1000))}min\n                                      </Badge>\n                                      <span className=\"text-xs text-yellow-600\">Monitor closely</span>\n                                    </div>\n                                  ) : isExpiringSoon ? (\n                                    <div className=\"flex flex-col gap-1\">\n                                      <Badge variant=\"outline\" className=\"text-yellow-600 border-yellow-600\">\n                                        <Clock className=\"w-3 h-3 mr-1\" />\n                                        Transfer in {Math.ceil(timeDiff / (60 * 60 * 1000))}hr\n                                      </Badge>\n                                      <span className=\"text-xs text-yellow-600\">Prepare for transfer</span>\n                                    </div>\n                                  ) : (\n                                    <div className=\"flex flex-col gap-1\">\n                                      <Badge variant=\"outline\" className=\"text-blue-600 border-blue-600\">\n                                        <Clock className=\"w-3 h-3 mr-1\" />\n                                        Auto-transfer enabled\n                                      </Badge>\n                                      <span className=\"text-xs text-blue-600\">System monitored</span>\n                                    </div>\n                                  )}\n                                </div>\n                              </TableCell>\n                            </TableRow>\n                          );\n                        })}\n                      </TableBody>\n                    </Table>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"calendar\" className=\"space-y-6\">\n            <EventCalendar />\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      <Footer />\n\n      {/* NGO Reservation Modal */}\n      <Dialog open={ngoModalOpen} onOpenChange={setNgoModalOpen}>\n        <DialogContent className=\"sm:max-w-[500px]\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Users className=\"w-5 h-5\" />\n              Reserve for NGO Collection\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            {selectedDonation && (\n              <div className=\"p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\">\n                <p className=\"font-medium\">{selectedDonation.foodItem?.name}</p>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Quantity: {selectedDonation.quantityDonated} items\n                </p>\n              </div>\n            )}\n            \n            <div className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"ngoName\">NGO Name</Label>\n                <Input\n                  id=\"ngoName\"\n                  placeholder=\"Enter NGO name\"\n                  value={ngoForm.ngoName}\n                  onChange={(e) => setNgoForm(prev => ({ ...prev, ngoName: e.target.value }))}\n                  data-testid=\"input-ngo-name\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"ngoContactPerson\">Contact Person</Label>\n                <Input\n                  id=\"ngoContactPerson\"\n                  placeholder=\"Enter contact person name\"\n                  value={ngoForm.ngoContactPerson}\n                  onChange={(e) => setNgoForm(prev => ({ ...prev, ngoContactPerson: e.target.value }))}\n                  data-testid=\"input-ngo-contact\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"ngoPhoneNumber\">Phone Number</Label>\n                <Input\n                  id=\"ngoPhoneNumber\"\n                  placeholder=\"Enter phone number\"\n                  value={ngoForm.ngoPhoneNumber}\n                  onChange={(e) => setNgoForm(prev => ({ ...prev, ngoPhoneNumber: e.target.value }))}\n                  data-testid=\"input-ngo-phone\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex gap-3 pt-4\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setNgoModalOpen(false);\n                  setSelectedDonation(null);\n                  setNgoForm({ ngoName: \"\", ngoContactPerson: \"\", ngoPhoneNumber: \"\" });\n                }}\n                className=\"flex-1\"\n                data-testid=\"button-cancel-ngo\"\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={() => {\n                  if (selectedDonation) {\n                    reserveDonationMutation.mutate({\n                      id: selectedDonation.id,\n                      ngoInfo: ngoForm,\n                    });\n                  }\n                }}\n                disabled={!ngoForm.ngoName || !ngoForm.ngoContactPerson || !ngoForm.ngoPhoneNumber || reserveDonationMutation.isPending}\n                className=\"flex-1 bg-blue-600 hover:bg-blue-700 text-white\"\n                data-testid=\"button-confirm-ngo\"\n              >\n                {reserveDonationMutation.isPending ? \"Reserving...\" : \"Reserve for NGO\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","size_bytes":54629},"client/src/components/calendar/event-calendar.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Calendar } from \"@/components/ui/calendar\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertEventSchema, type Event, type EventWithCreator } from \"@shared/schema\";\nimport { format, parseISO, isSameDay } from \"date-fns\";\nimport { CalendarDays, Clock, MapPin, Phone, Plus, Edit, Trash2 } from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst eventFormSchema = insertEventSchema.omit({ createdBy: true }).extend({\n  startTime: z.string().min(1, \"Start time is required\"),\n  endTime: z.string().min(1, \"End time is required\"),\n});\n\ntype EventFormData = z.infer<typeof eventFormSchema>;\n\ninterface EventCalendarProps {\n  className?: string;\n}\n\nexport function EventCalendar({ className }: EventCalendarProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedDate, setSelectedDate] = useState<Date | undefined>(new Date());\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [editingEvent, setEditingEvent] = useState<Event | null>(null);\n\n  // Fetch events\n  const { data: events = [], isLoading: eventsLoading } = useQuery<EventWithCreator[]>({\n    queryKey: [\"/api/events\"],\n  });\n\n  const form = useForm<EventFormData>({\n    resolver: zodResolver(eventFormSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      startTime: \"\",\n      endTime: \"\",\n      location: \"\",\n      phoneNumber: \"\",\n    },\n  });\n\n  // Create event mutation\n  const createEventMutation = useMutation({\n    mutationFn: async (data: EventFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/events\", data);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to create event\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Event Created\",\n        description: \"Your event has been created successfully.\",\n      });\n      setIsCreateModalOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update event mutation\n  const updateEventMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<EventFormData> }) => {\n      const response = await apiRequest(\"PUT\", `/api/events/${id}`, data);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to update event\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Event Updated\",\n        description: \"Your event has been updated successfully.\",\n      });\n      setEditingEvent(null);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete event mutation\n  const deleteEventMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/events/${id}`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to delete event\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Event Deleted\",\n        description: \"The event has been deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/events\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: EventFormData) => {\n    if (editingEvent) {\n      updateEventMutation.mutate({ id: editingEvent.id, data });\n    } else {\n      createEventMutation.mutate(data);\n    }\n  };\n\n  const openEditModal = (event: Event) => {\n    setEditingEvent(event);\n    form.reset({\n      title: event.title,\n      description: event.description || \"\",\n      startTime: event.startTime,\n      endTime: event.endTime,\n      location: event.location,\n      phoneNumber: event.phoneNumber || \"\",\n    });\n  };\n\n  const closeModal = () => {\n    setIsCreateModalOpen(false);\n    setEditingEvent(null);\n    form.reset();\n  };\n\n  // Get events for selected date\n  const selectedDateEvents = selectedDate\n    ? events.filter((event) =>\n        isSameDay(parseISO(event.startTime), selectedDate)\n      )\n    : [];\n\n  // Get upcoming events (next 7 days)\n  const upcomingEvents = events\n    .filter((event) => new Date(event.startTime) >= new Date())\n    .slice(0, 5);\n\n  // Check if a date has events\n  const dateHasEvents = (date: Date) => {\n    return events.some((event) => isSameDay(parseISO(event.startTime), date));\n  };\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-2xl font-bold\">Event Calendar</h2>\n        <Dialog \n          open={isCreateModalOpen || editingEvent !== null} \n          onOpenChange={(open) => !open && closeModal()}\n        >\n          <DialogTrigger asChild>\n            <Button \n              onClick={() => setIsCreateModalOpen(true)}\n              className=\"bg-forest hover:bg-forest-dark text-white\"\n              data-testid=\"button-create-event\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Event\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingEvent ? \"Edit Event\" : \"Create New Event\"}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Event Title</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"Enter event title\"\n                          data-testid=\"input-event-title\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          {...field} \n                          value={field.value || \"\"}\n                          placeholder=\"Enter event description\"\n                          data-testid=\"input-event-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"startTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Start Time</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            type=\"datetime-local\"\n                            data-testid=\"input-event-start-time\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"endTime\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>End Time</FormLabel>\n                        <FormControl>\n                          <Input \n                            {...field} \n                            type=\"datetime-local\"\n                            data-testid=\"input-event-end-time\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"location\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Location</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"Enter event location\"\n                          data-testid=\"input-event-location\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"phoneNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Phone Number (Optional)</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          value={field.value || \"\"}\n                          type=\"tel\"\n                          placeholder=\"Enter contact phone number\"\n                          data-testid=\"input-event-phone\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex gap-3 pt-4\">\n                  <Button \n                    type=\"submit\" \n                    disabled={createEventMutation.isPending || updateEventMutation.isPending}\n                    className=\"flex-1 bg-forest hover:bg-forest-dark text-white\"\n                    data-testid=\"button-save-event\"\n                  >\n                    {createEventMutation.isPending || updateEventMutation.isPending\n                      ? \"Saving...\" \n                      : editingEvent \n                        ? \"Update Event\" \n                        : \"Create Event\"\n                    }\n                  </Button>\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={closeModal}\n                    data-testid=\"button-cancel-event\"\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Calendar */}\n        <Card className=\"lg:col-span-2\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <CalendarDays className=\"h-5 w-5\" />\n              Calendar View\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Calendar\n              mode=\"single\"\n              selected={selectedDate}\n              onSelect={setSelectedDate}\n              className=\"rounded-md border\"\n              modifiers={{\n                hasEvents: (date) => dateHasEvents(date),\n              }}\n              modifiersStyles={{\n                hasEvents: { backgroundColor: \"#e6f3f0\", fontWeight: \"bold\" },\n              }}\n              data-testid=\"calendar-view\"\n            />\n            \n            {selectedDate && (\n              <div className=\"mt-4\">\n                <h4 className=\"font-semibold mb-2\">\n                  Events on {format(selectedDate, \"MMMM d, yyyy\")}\n                </h4>\n                {selectedDateEvents.length === 0 ? (\n                  <p className=\"text-gray-500 text-sm\">No events on this date</p>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {selectedDateEvents.map((event) => (\n                      <div \n                        key={event.id} \n                        className=\"p-3 border rounded-lg bg-gray-50 dark:bg-gray-800\"\n                        data-testid={`event-card-${event.id}`}\n                      >\n                        <div className=\"flex items-start justify-between\">\n                          <div className=\"flex-1\">\n                            <h5 className=\"font-medium\">{event.title}</h5>\n                            <div className=\"flex items-center gap-4 text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                              <span className=\"flex items-center gap-1\">\n                                <Clock className=\"h-3 w-3\" />\n                                {format(parseISO(event.startTime), \"h:mm a\")} - {format(parseISO(event.endTime), \"h:mm a\")}\n                              </span>\n                              <span className=\"flex items-center gap-1\">\n                                <MapPin className=\"h-3 w-3\" />\n                                {event.location}\n                              </span>\n                              {event.phoneNumber && (\n                                <span className=\"flex items-center gap-1\">\n                                  <Phone className=\"h-3 w-3\" />\n                                  {event.phoneNumber}\n                                </span>\n                              )}\n                            </div>\n                            {event.description && (\n                              <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                                {event.description}\n                              </p>\n                            )}\n                          </div>\n                          <div className=\"flex gap-1 ml-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => openEditModal(event)}\n                              data-testid={`button-edit-event-${event.id}`}\n                            >\n                              <Edit className=\"h-3 w-3\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => deleteEventMutation.mutate(event.id)}\n                              disabled={deleteEventMutation.isPending}\n                              data-testid={`button-delete-event-${event.id}`}\n                            >\n                              <Trash2 className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Upcoming Events */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Upcoming Events</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {eventsLoading ? (\n              <p className=\"text-sm text-gray-500\">Loading events...</p>\n            ) : upcomingEvents.length === 0 ? (\n              <p className=\"text-sm text-gray-500\">No upcoming events</p>\n            ) : (\n              <div className=\"space-y-3\">\n                {upcomingEvents.map((event) => (\n                  <div \n                    key={event.id} \n                    className=\"p-3 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors\"\n                    data-testid={`upcoming-event-${event.id}`}\n                  >\n                    <h5 className=\"font-medium text-sm\">{event.title}</h5>\n                    <div className=\"flex items-center gap-1 text-xs text-gray-600 dark:text-gray-400 mt-1\">\n                      <Clock className=\"h-3 w-3\" />\n                      {format(parseISO(event.startTime), \"MMM d, h:mm a\")}\n                    </div>\n                    <div className=\"flex items-center gap-1 text-xs text-gray-600 dark:text-gray-400\">\n                      <MapPin className=\"h-3 w-3\" />\n                      {event.location}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":17604}},"version":1}